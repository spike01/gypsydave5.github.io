<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>gypsydave5</title>
 <link href="http://gypsydave5.com/atom.xml" rel="self"/>
 <link href="http://gypsydave5.com/"/>
 <updated>2015-04-05T00:48:32+01:00</updated>
 <id>http://gypsydave5.com</id>
 <author>
   <name>David Wickes</name>
   <email>dave@gypsydave5.com</email>
 </author>

 
 <entry>
   <title>(Basic) Lazy Evaluation and Memoization in JavaScript</title>
   <link href="http://gypsydave5.com/2015/03/21/lazy-eval-and-memo/"/>
   <updated>2015-03-21T21:41:18+00:00</updated>
   <id>http://gypsydave5.com/2015/03/21/lazy-eval-and-memo</id>
   <content type="html">&lt;p&gt;Calculation takes time and effort. If I needed to know what &lt;code&gt;4719340 + 397394&lt;/code&gt;
was (and I didn&amp;#39;t have a calculator), it would take a few minutes to work out.
Right now as I don&amp;#39;t need to know.  Maybe I&amp;#39;ll never need to know. I could put
those two numbers and the &lt;code&gt;+&lt;/code&gt; sign on a piece of paper and stick it in my
pocket. If I ever wanted to know the answer, I could get the paper out and do
the maths. I should write &amp;#39;Answer to silly blog sum&amp;#39; on the top of the paper so
I know what the sum is about. And why I&amp;#39;m carrying a piece of paper around.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s lazy evaluation - holding on to an expression and only evaluating it when
you need it. It pairs neatly with &lt;strong&gt;memoization&lt;/strong&gt; - keeping the results of
evaluated expressions in memory so that you don&amp;#39;t have to evaluate them every
time you need their result.&lt;/p&gt;

&lt;p&gt;(Which figures as, if I ever do work out what &lt;code&gt;4719340 + 397394&lt;/code&gt; is, I never
want to work it out again. Ever.)&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a look at doing some lazy evaluation in JavaScript - in other
languages, such as Clojure, we get &lt;a href=&quot;http://clojure.org/sequences&quot;&gt;a lot of this baked in&lt;/a&gt;, but in JavaScript
there&amp;#39;s some work to do. Let&amp;#39;s take a simple function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we&amp;#39;d like to make that function lazy - with another function, naturally.
Something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addThisLater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazyEval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;addThisLater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lazyEval()&lt;/code&gt; takes a function name, some more arguments, and returns a function
that, when it evaluates, returns the result of evaluating the passed in function
with the other arguments.&lt;/p&gt;

&lt;p&gt;So far so good - but what needs to be returned from &lt;code&gt;lazyEval()&lt;/code&gt; to make it work as
described above? As it turns out, not that much:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazyEval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is where things get exciting. We&amp;#39;ve &lt;a href=&quot;/2015/02/19/not-quite-js-currying/&quot;&gt;seen &lt;code&gt;bind()&lt;/code&gt; before&lt;/a&gt;, so
let&amp;#39;s take a look at &lt;code&gt;apply()&lt;/code&gt;, what happens when we chain it with &lt;code&gt;bind()&lt;/code&gt;, and
what&amp;#39;s happening with &lt;code&gt;arguments&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; is pretty simple - it&amp;#39;s a method that all functions have. It takes
two arguments. When its evaluated it returns the result of evaluating the
function within the scope of the first argument (just like &lt;code&gt;bind()&lt;/code&gt;). The second
argument is an array (or an array-like object - that&amp;#39;s important) of arguments
for the function to be evaluated with. Which all sounds scary, but if I do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope that begins to makes more sense. Now let&amp;#39;s take a closer look at &lt;code&gt;arguments&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;arguments&lt;/code&gt; and Argument Binding&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; is an array-like object (it lacks a number of methods that arrays
have) which contains, unsurprisingly, all of the arguments passed to the current
function you&amp;#39;re in the scope of - even ones not bound to a variable.&lt;/p&gt;

&lt;p&gt;JavaScript functions, unlike some other languages, can take as many parameters
as you like. Which means that this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;works just like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;peace&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;love&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;understanding&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt; binds its first two arguments to &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Those extra arguments get
ignored - &lt;code&gt;add()&lt;/code&gt; just goes on adding as usual. But that does not mean that
those arguments go nowhere. They&amp;#39;re still available to the function in the
&lt;code&gt;arguments&lt;/code&gt; &lt;del&gt;array&lt;/del&gt; array-like object.&lt;/p&gt;

&lt;p&gt;Look, try this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; { 0: 1 }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;peace&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;love&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;understanding&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; { &amp;#39;0&amp;#39;: &amp;#39;peace&amp;#39;,&amp;#39;1&amp;#39;: [ &amp;#39;love&amp;#39; ], &amp;#39;2&amp;#39;: { and: &amp;#39;understanding&amp;#39; } }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;faith&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;charity&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;charity&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, back on track. When &lt;code&gt;apply(fn, arguments)&lt;/code&gt; is evaluated, it is passing the
arguments &lt;code&gt;fn, 4, 5&lt;/code&gt; along to the function that &lt;code&gt;apply()&lt;/code&gt; is being called
on. Namely, in this case, &lt;code&gt;bind()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(As a comparison, if &lt;code&gt;apply()&lt;/code&gt; was replaced by its close cousin, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;,
which takes more traditional looking arguments, it would look like this:
&lt;code&gt;bind.call(fn, fn, 4, 5)&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fn, 4, 5&lt;/code&gt; gets passed along to &lt;code&gt;bind()&lt;/code&gt;, where &lt;code&gt;fn&lt;/code&gt; becomes the &lt;code&gt;this&lt;/code&gt; argument
for &lt;code&gt;bind()&lt;/code&gt;, providing the scope, and the &lt;code&gt;4, 5&lt;/code&gt; get bound as the arguments of
the function that &lt;code&gt;bind()&lt;/code&gt; is being called on (in our examples, &lt;code&gt;add()&lt;/code&gt;). And so
we get the &lt;code&gt;add()&lt;/code&gt; function back, but with all its arguments already bound,
ready to be evaluated with a flick of our &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Memoization&lt;/h3&gt;

&lt;p&gt;All of which is great, but what&amp;#39;s the point if you have to evaluate the function
every time it&amp;#39;s called? Wouldn&amp;#39;t it be better if the function &amp;#39;remembered&amp;#39; the
result, and returned the remembered result the second time it was called rather
than evaluating it all over again? Or, to continue the increasingly strained
example, I should write the answer down on my piece of paper once I&amp;#39;ve worked it
out the first time, rather than having to do the sum every time I need to know
the answer.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;memoization&lt;/a&gt;, a way of optimizing code so that it will return cached
results for the same inputs. This might get a little more complicated with
functions that have more than one input, but for our little &lt;code&gt;lazyEval&lt;/code&gt; function
it&amp;#39;s not all that hard (there&amp;#39;s no arguments at all!):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazyEvalMemo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazyEval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;I remember this one!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Let me work this out for the first time...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazyEval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s give it a function - a &lt;code&gt;sum&lt;/code&gt; that does a little reporting for us...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m calculating!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And let it rip!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazyMemoSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazyEvalMemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4719340&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;397394&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;lazyMemoSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Let me work this out for the first time...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; I&amp;#39;m calculating!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 5116734&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;lazyMemoSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; I remember this one!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 5116734&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does the calculation the first time, and every subsequent call uses the
memoized result.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Brew Cask</title>
   <link href="http://gypsydave5.com/2015/03/21/brew-cask/"/>
   <updated>2015-03-21T19:12:28+00:00</updated>
   <id>http://gypsydave5.com/2015/03/21/brew-cask</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; is wonderful, and if you&amp;#39;re using a Mac to develop on and aren&amp;#39;t
using it to manage your command line applications then I&amp;#39;d be surprised.
Actually, I&amp;#39;d assume you were using [MacPorts].&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve recently started to take advantage of an additonal library of prebuilt
binaries for Homebrew called &lt;a href=&quot;https://github.com/caskroom/homebrew-cask&quot;&gt;Cask&lt;/a&gt;. This gives access to many (if not all) of
the larger, often graphical, applications that you need, such as Chrome,
IntelliJ, Vagrant... it&amp;#39;s a long list.&lt;/p&gt;

&lt;p&gt;It even integrates well with my favourite Mac productivity tool, &lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt;. And,
yes, you can install that with Cask too.&lt;/p&gt;

&lt;p&gt;Set up with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install caskroom/cask/brew-cask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then install software with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew cask install alfred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>(not quite) Currying in JavaScript</title>
   <link href="http://gypsydave5.com/2015/02/19/not-quite-js-currying/"/>
   <updated>2015-02-19T13:20:28+00:00</updated>
   <id>http://gypsydave5.com/2015/02/19/not-quite-js-currying</id>
   <content type="html">&lt;p&gt;Currying, yet another &lt;em&gt;I&amp;#39;ve heard the cool kids saying that&lt;/em&gt; word. Acually,
having done some reading, it turns out the cool kids may be misusing it, but
we&amp;#39;ll get to that part later. Let&amp;#39;s just spend a minute looking at the wonder of
&lt;code&gt;.bind()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s say we always wanted to be adding twenty-two - we could make ourselves
a shiny new function, or we could build on the way &lt;code&gt;addition&lt;/code&gt; works using
&lt;code&gt;.bind()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTwentyTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;addTwentyTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt;, as you&amp;#39;ll see in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;MDN docs&lt;/a&gt;, is a method you can call on a function in
JavaScript. It creates a new function based on the old one, with the &lt;code&gt;this&lt;/code&gt;
keyword of the new function set to the first argument to &lt;code&gt;bind()&lt;/code&gt;, and other
arguments given being set to the arguments of the original function. Confusing,
right? Well, it&amp;#39;s probably best to ignore the first arpument, the &lt;code&gt;this&lt;/code&gt;
reassignment for now, unless there&amp;#39;s a pressing need to change it, and focus on
the rest. Here, let&amp;#39;s do it again:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twentyFive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTwentyTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;twentyFive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we use &lt;code&gt;.bind()&lt;/code&gt; we can change the &lt;em&gt;arity&lt;/em&gt; (number of ardguments) of the
function returned, setting the values of any of all of the arguments in the
original function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;twoHundred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;twoHundred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What bind allows us to do is &lt;em&gt;partial application&lt;/em&gt;, fixing values of a function
and returning one of smaller arity:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTheseFourUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTwoAndTheseThreeUp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTheseFourUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;addTwoAndTheseThreeUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is technically not &lt;em&gt;currying&lt;/em&gt;, which &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot;&gt;should only return functions with an
arity of 1&lt;/a&gt;. Currying &lt;code&gt;addTheseFourUp&lt;/code&gt; would look something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curriedFour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;curriedFour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which we could also play around with like this...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyFourTimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;applyFourTimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 48&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Postscript&lt;/h3&gt;

&lt;p&gt;Not only is partial function application not currying - but currying should
probably be called &lt;em&gt;Schönfinkelization&lt;/em&gt; after its true originator, &lt;a href=&quot;https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel&quot;&gt;Moses
Schönfinkel&lt;/a&gt;, to whom &lt;a href=&quot;https://en.wikipedia.org/wiki/Haskell_Curry&quot;&gt;Haskell Curry&lt;/a&gt; attributed the concept. That said, W. V.
O. Quine points out that the idea had already been hit upon by &lt;a href=&quot;https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel#Work&quot;&gt;Frege&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From JavaScript to philosophy in but a few skips...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Arrays in JavaScript</title>
   <link href="http://gypsydave5.com/2015/02/14/javascript-arrays/"/>
   <updated>2015-02-14T22:40:30+00:00</updated>
   <id>http://gypsydave5.com/2015/02/14/javascript-arrays</id>
   <content type="html">&lt;p&gt;Arrays are easy, right? Pretty basic go-to data structure. Pretty primative. So
if we did something like this - we wouldn&amp;#39;t be messing with the array would we?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;alan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;harry&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;suprise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dave&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;surely not?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; surprise&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [&amp;quot;tom&amp;quot;, &amp;quot;alan&amp;quot;, &amp;quot;harry&amp;quot;, suprise: &amp;quot;dave&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which might just be a good reason not to use &lt;code&gt;for... in&lt;/code&gt;, or trusting it to put
things as strings in a sensible way, but is a good demonstration of...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bob&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;quot;object&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because everything is an object in JS, the interface for arrays is kinda hacked
together out of object properties. Arrays are built on top of
objects, they are not a simpler data-type, and objects in JS are just &lt;strong&gt;collections of strings that point at things&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(and there aren&amp;#39;t just arrays to consider - when there&amp;#39;s the world of
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects&quot;&gt;Array-like objects&lt;/a&gt; to look at. But more on that another time.)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hoisting in JavaScript</title>
   <link href="http://gypsydave5.com/2015/02/01/hoisting-js/"/>
   <updated>2015-02-01T16:25:18+00:00</updated>
   <id>http://gypsydave5.com/2015/02/01/hoisting-js</id>
   <content type="html">&lt;p&gt;Working at &lt;a href=&quot;http://www.mergermarket.com/info/&quot;&gt;Mergermarket&lt;/a&gt; is fun. Not only am I getting to grips with a new
language, &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt;, in a nice, agile environment, on a project that&amp;#39;s
challenging but to which I can make some small and increasing contributions to. Not
only that, but I&amp;#39;m also working with some damn clever and patient people who
are happy to explain things to me as we go along.&lt;/p&gt;

&lt;p&gt;So my next thsee posts will be about some of what I&amp;#39;ve learned about JavaScript
in the last month with Mat, Mike, Danielle, Nick and many others.&lt;/p&gt;

&lt;h3&gt;Hoisting&lt;/h3&gt;

&lt;p&gt;At the top of my list of &amp;quot;words I&amp;#39;d heard associated with JS but didn&amp;#39;t have
the foggiest&amp;quot;, &lt;em&gt;hoisting&lt;/em&gt; or, more transparently, variable hoisting. Behold the
following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printThis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showLog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MESSAGE!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which you may be inclined to think would return two outputs to the console when
called with &lt;code&gt;printThis(true)&lt;/code&gt;, one of &lt;code&gt;MESSAGE!&lt;/code&gt; and then the ubiquitous JS
&lt;code&gt;undefined&lt;/code&gt;. Because &lt;code&gt;logMessage&lt;/code&gt; isn&amp;#39;t defined at the second &lt;code&gt;console.log()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Does it?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MESSAGE!
MESSAGE!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the interpreter looks at the code and does this to it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showLog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;logMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MESSAGE!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The variable is &amp;#39;hoisted&amp;#39; out of its declaration in the block and created at the
top of the function. The assignment still takes place in the same place, but
because the scope of &lt;code&gt;logMessage&lt;/code&gt; is the entire function, the variable is still
available at the last &lt;code&gt;console.log&lt;/code&gt;. This is because (motto alert) &lt;strong&gt;JS
has function-level scope, not block-level scope&lt;/strong&gt;. The interpreter just ignores
those little &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; unless they&amp;#39;re backed up with a function declaration.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Evaluating Ruby in Vim</title>
   <link href="http://gypsydave5.com/2015/01/01/Ruby-Eval-in-Vim/"/>
   <updated>2015-01-01T21:28:04+00:00</updated>
   <id>http://gypsydave5.com/2015/01/01/Ruby-Eval-in-Vim</id>
   <content type="html">&lt;p&gt;I was watching &lt;a href=&quot;https://twitter.com/avdi&quot;&gt;Avdi Grimm&lt;/a&gt;&amp;#39;s &lt;a href=&quot;http://www.rubytapas.com/&quot;&gt;Ruby Tapas&lt;/a&gt; videos - well, trying to watch them.
I got stuck when I saw him do something in &lt;del&gt;Vim&lt;/del&gt; Emacs that I&amp;#39;d not seen before.
Something magical.&lt;/p&gt;

&lt;p&gt;On screen he had an expression - something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In one keypress it became:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then quick as a flash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Point:0x000000038862d0 @x=3 @y=5&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I immediately stopped paying attention to the &lt;a href=&quot;http://www.rubytapas.com/episodes/7-Constructors?filter=free&quot;&gt;excellent video about
constructors&lt;/a&gt; and started to look up what was going on. So here we go down the
Vim rabbit hole again...&lt;/p&gt;

&lt;p&gt;The magic is performed by either &lt;a href=&quot;http://rubygems.org/gems/rcodetools&quot;&gt;rcodetools&lt;/a&gt;&amp;#39; xmpfilter tool or
&lt;a href=&quot;https://github.com/JoshCheek/seeing_is_believing&quot;&gt;seeing_is_believing&lt;/a&gt;, hooked up to Vim via &lt;a href=&quot;https://github.com/t9md/vim-ruby-xmpfilter&quot;&gt;vim-ruby-xmpfilter&lt;/a&gt;, (which works
for both) or &lt;a href=&quot;https://github.com/hwartig/vim-seeing-is-believing&quot;&gt;vim-seeing-is-believing&lt;/a&gt;. Take your pick as I can&amp;#39;t really see the
difference at the moment.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve got xmpfilter set up with the following in my &lt;code&gt;.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F4&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;xmpfilter&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;mark&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; xmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F4&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;xmpfilter&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;mark&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F4&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;xmpfilter&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;mark&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;xmpfilter&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; xmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;xmpfilter&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt; imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;xmpfilter&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you too can evaluate Ruby code on the fly in Vim. And I can get back to
watching more of Avdi.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Three Ways with Clojure</title>
   <link href="http://gypsydave5.com/2014/12/21/clojure-thoughts/"/>
   <updated>2014-12-21T21:04:07+00:00</updated>
   <id>http://gypsydave5.com/2014/12/21/clojure-thoughts</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been working with &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; in the last few days, both looking at the
&lt;a href=&quot;http://clojurekoans.com/&quot;&gt;Clojure Koans&lt;/a&gt; and another resource I&amp;#39;ve discovered &lt;a href=&quot;http://www.4clojure.com/&quot;&gt;4clojure.com&lt;/a&gt;. I&amp;#39;d like to
share a nice problem I saw there, and some of the solutions to it which I think
expose some of the things I&amp;#39;m beginning to appreciate about the language.&lt;/p&gt;

&lt;h3&gt;The Problem&lt;/h3&gt;

&lt;p&gt;as stated on &lt;a href=&quot;http://www.4clojure.com/problem/21#prob-title&quot;&gt;4clojure&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function which returns the Nth element from a sequence.
(Without using &lt;code&gt;nth&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;nth&lt;/code&gt; is the obvious answer to the problem, as it returns the nth element in
a sequence:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nth &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to get to a function that will do the same, something that will fit
in the blank space below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Solution 1: recurring&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my_nth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zero? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my-nth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rest &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dec &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we use recurrance, setting the breaking point as the iteration where &lt;code&gt;n&lt;/code&gt; is
zero using &lt;code&gt;if&lt;/code&gt;, at which point the function returns the &lt;code&gt;first&lt;/code&gt; value of the
sequence. If it&amp;#39;s not, we fire the function again, but this time chopping off
the first member of the sequence (&lt;code&gt;(rest seqn)&lt;/code&gt; returns the rest) and
&lt;code&gt;dec&lt;/code&gt;rementing the value of &lt;code&gt;n&lt;/code&gt; by one. We walk through the sequence, losing
items from the front of the sequence &lt;code&gt;n&lt;/code&gt; times, until we get to the index.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve named the function &lt;code&gt;my_nth&lt;/code&gt;, but we could easily anonymize it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zero? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recur&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rest &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dec &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;recur&lt;/code&gt; is neat - it executes the expressions that follow it, then rebinds the
values hey produce to the bindings of the recursion point, in this case the
&lt;code&gt;fn&lt;/code&gt; method. We then get moved back to that method with the new values, causing
the recusion. Very cool.&lt;/p&gt;

&lt;p&gt;Usually recursion is a neat way of writing a short function; here it&amp;#39;s pretty
longwinded. We can get smaller...&lt;/p&gt;

&lt;h3&gt;Solution 2: taking&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seqn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we &lt;code&gt;take&lt;/code&gt; the first one-more-than-n (&lt;code&gt;inc&lt;/code&gt; increments its argument) items
from the sequence, and then take the &lt;code&gt;last&lt;/code&gt; one from the end of that new list-
which will be the nth element.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;take&lt;/code&gt; is used in many of the examples I&amp;#39;ve seen as a way of accessing
a sequence which may be infinite like the Fibonacci series - see some of the
examples over at
&lt;a href=&quot;https://en.wikibooks.org/wiki/Clojure_Programming/Examples/Lazy_Fibonacci&quot;&gt;Wikibooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can squeeze more succinctness in there using some alternative syntax:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you want to be really succinct:&lt;/p&gt;

&lt;h3&gt;Solution 3: ripping off Java&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;.get&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Clojure gives you access to Java methods and fields through the use of the dot
(&lt;code&gt;.&lt;/code&gt;) operator, which taks the form &lt;code&gt;(.instanceMember instance arguments*)&lt;/code&gt;.
Here we&amp;#39;re using the &lt;code&gt;get()&lt;/code&gt; method from the Java &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/collections/interfaces/list.html&quot;&gt;Lists
interface&lt;/a&gt;,
which we get to use on these instances as they are, well, Java lists.  which
takes one argument - and luckily for us its the index! We&amp;#39;re calling &lt;code&gt;get(6)&lt;/code&gt;
on the list, which gives us the answer we want.&lt;/p&gt;

&lt;p&gt;This is pretty close to cheating, but it goes to show how Clojure&amp;#39;s access to
Java gives us a whole other language of libraries and methods to play with.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book Review: Computer Science Programming Basics in Ruby</title>
   <link href="http://gypsydave5.com/2014/12/14/book-review-compsci-basics-ruby/"/>
   <updated>2014-12-14T20:54:50+00:00</updated>
   <id>http://gypsydave5.com/2014/12/14/book-review-compsci-basics-ruby</id>
   <content type="html">&lt;p&gt;I recently finished reading &lt;a href=&quot;http://shop.oreilly.com/product/0636920028192.do&quot;&gt;Computer Science Programming Basics in Ruby&lt;/a&gt; by
Ophir Frieder, Gideon Frieder and David Grossman. I was looking for something
that would extend my knowledge of computer science fundamentals - the title
appealed a I&amp;#39;ve done the majority of my coding up to this point in Ruby, so
I was hoping the familiar language would allow me to concentrate more on the
computer science theory.&lt;/p&gt;

&lt;p&gt;I was ultimately disappointed - the book isn&amp;#39;t so much a computer science primer
as a programming primer. The concepts being taught in this book tend to be basic
ones - control flow, simple data structures, how a computer works. It&amp;#39;s pitched
at an entry level, and for that I&amp;#39;m sure it&amp;#39;s ideal, but it&amp;#39;s not quite what
I was after.&lt;/p&gt;

&lt;p&gt;Idiomatic Ruby is avoided in the book in favour of using patterns that are more
generic to all programming languages. This is a good idea as it introduces core
programming concepts in a non language specific way, but the lack of common Ruby
methods like &lt;code&gt;each&lt;/code&gt; might be concerning to some. The book teaches programming
basics in Ruby, but I don&amp;#39;t think it teaches a great deal of Ruby while doing
so.&lt;/p&gt;

&lt;p&gt;That said I learned a great deal in Chapter 7, Sorting and Searching. The
comparison of different search and sort algorithms make a good introduction to
algorithms in general and made me think a bit harder about the magic that goes
on under the hood of Ruby methods and operators that I take for granted. I&amp;#39;m
going to try and learn more about algorithms in the next few weeks (see my &lt;a href=&quot;/2014/12/08/exposing-myself/&quot;&gt;last
post&lt;/a&gt; for the rest of my hit list).&lt;/p&gt;

&lt;p&gt;Maybe borrow this book from the library and give it a skim read if you&amp;#39;re
already familiar with Ruby, because I&amp;#39;m sure you&amp;#39;ll find some useful stuff there. If
you&amp;#39;re interested in learning Ruby from the ground up you should probably pair
this book with something like &lt;em&gt;&lt;a href=&quot;http://www.manning.com/black2/&quot;&gt;The Well Grounded Rubyist&lt;/a&gt;&lt;/em&gt; in order to see why
Ruby&amp;#39;s so precious and shiny. Otherwise it&amp;#39;s a well structured, detailed and
approachable introductory text, if maybe a touch academic. Just not for me right
now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Exposing my ignorance</title>
   <link href="http://gypsydave5.com/2014/12/08/exposing-myself/"/>
   <updated>2014-12-08T21:22:02+00:00</updated>
   <id>http://gypsydave5.com/2014/12/08/exposing-myself</id>
   <content type="html">&lt;p&gt;I am currently reading (on impeccable advice), &lt;em&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596518387.do&quot;&gt;Apprenticeship Patterns&lt;/a&gt;&lt;/em&gt; by
&lt;a href=&quot;https://twitter.com/davehoover&quot;&gt;Dave Hoover&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ade_oshineye&quot;&gt;Adewale Oshineye&lt;/a&gt;. The book is written as a series of
&amp;#39;patterns&amp;#39;, a method of analysing and solving problems which is derived from
a book I&amp;#39;ve always meant to read but haven&amp;#39;t, &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/A_Pattern_Language&quot;&gt;A Pattern Language&lt;/a&gt;&lt;/em&gt; by
Christopher Alexander, Sara Ishikawa and Murray Silverstein. There a pattern is
a solution to an architectural design pattern, a &amp;quot;best guess as to what
arrangement of the physical environment will work to solve the problem
presented.&amp;quot; Here the patterns are &amp;#39;best guesses&amp;#39; as to how to solve the problems
of becoming a better developer.&lt;/p&gt;

&lt;p&gt;Two patterns I&amp;#39;ve been looking at in the last few days are &amp;quot;Expose Your
Ignorance&amp;quot; and &amp;quot;Confront Your Ignorance&amp;quot;. The first pattern declares that, as
an apprentice you don&amp;#39;t know how to do a lot of things that you are going to
have to do. A first instinct (OK, &lt;em&gt;my&lt;/em&gt; first instinct) is to hide that
ignorance, nod blithely as the person describes the thing you don&amp;#39;t understand
and then do a lot of reading and experimenting when you&amp;#39;re back home. &amp;#39;Fake it
till you make it&amp;#39;.&lt;/p&gt;

&lt;p&gt;This can work, but it&amp;#39;s incredibly inefficient. Other people know already, most
importantly the people who are asking you complete a task. Just say that you
don&amp;#39;t know - that way you open up the opportunity for them to help you where you
struggle. Take route A, the shortest path between two points, and ask questions.
This quote sums it up:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Tell people the truth. Let them know that you’re starting to understand what
they want and you’re in the process of learning how to give it to them. If you
reassure them, reassure them with your ability to learn, not by pretending to
know something you don’t. In this way, your reputation will be built upon your
learning ability rather than what you already know.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My quality as a programmer is not defined by what I know, but rather by what
I can know. But the hardest person to expose that ignorance to is always yoursel&lt;/p&gt;

&lt;p&gt;The corollary to &amp;quot;Exposing Your Ignorance&amp;quot; is &amp;quot;Confronting Your Ignorance&amp;quot;. An
old colleague of mine would always say that he&amp;#39;d forgive anything, other than
&amp;#39;willful ignorance&amp;#39;. There&amp;#39;s little point in declaring your ignorance if you&amp;#39;re
not actively addressing those gaps in your knowledge. Asking questions is
a start, but oher techniques like pair programming, building example projects,
and good old fashioned reading, are there too.&lt;/p&gt;

&lt;p&gt;Each pattern has a set of actions associated with it. &amp;quot;Exposing Your Ignorance&amp;quot;
asks that you write down five things that you don&amp;#39;t understand about your work
and put it where others can see it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Can I build a toy app in Java?&lt;/li&gt;
&lt;li&gt;How do I use mocks in Java (London style TDD)?&lt;/li&gt;
&lt;li&gt;How do I implement a &amp;#39;hexagonal&amp;#39; design, and what does that even mean?&lt;/li&gt;
&lt;li&gt;What are generics (in Java and elsewhere)?&lt;/li&gt;
&lt;li&gt;What is the best way for me to structure AngularJS and other JavaScript projects?&lt;/li&gt;
&lt;li&gt;What is functional programming? I mean, &lt;em&gt;really&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;What is an algorithm and how do I measure its efficiency?&lt;/li&gt;
&lt;li&gt;Refactoring. I (think I) know what it means but can I learn some patterns to do it better?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not exactly five, but I could probably write fifty at the moment. There are lots
of other things I don&amp;#39;t know (list as long as my arm). But, you&amp;#39;ve got to start
somewhere.&lt;/p&gt;

&lt;p&gt;The action for &amp;quot;Confronting Your Ignorance&amp;quot; is to pick one of the things on your
list and, well, learn it. Nice and simple - show your ignorance and own your
ignorance, and fix your ignorance. That&amp;#39;s a powerful tool.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m enjoying the book. I&amp;#39;ll hopefully provide a fuller review at a later date.
And also provide an update of which of my ignorances I&amp;#39;ve confronted.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Programming Language Koans</title>
   <link href="http://gypsydave5.com/2014/11/22/koans/"/>
   <updated>2014-11-22T18:28:03+00:00</updated>
   <id>http://gypsydave5.com/2014/11/22/koans</id>
   <content type="html">&lt;p&gt;I finished the &lt;a href=&quot;https://github.com/neo/ruby_koans&quot;&gt;Ruby Koans&lt;/a&gt; today. I&amp;#39;d been
pretty close to the end before I started study at Makers Academy, but it&amp;#39;s good
to have them done. I noticed I flew through the last few regardng
metaprogramming - I&amp;#39;ve been taught well.&lt;/p&gt;

&lt;p&gt;Koans are an interesting tool to learn a language. Instead of teaching a fact,
they instead encourage solving a problem. The problems are koans in the sense
that the solution to each one reveals a new aspect of Ruby to the student. This
starts with simple operators and ends with metaprogramming techniques. The
solution tends to be of the &amp;#39;fill in the blank&amp;#39; form, although sometimes they
require editing a class.&lt;/p&gt;

&lt;p&gt;What I admire about this technique is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each problem is, in effect, a test. TDD is baked in from the beginning, even
if you don&amp;#39;t happen to know what testing is. Think of it as test driven
learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The lessons are inseperable from the questions. Simply by answering the
question you are learning. There is no text with a list of questions at the
end to ensure understanding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hands on keyboard. You&amp;#39;re reading, and writing, code in an active way. There
is no passive learning with writing koans.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#39;ve not tried out a set of koans, here&amp;#39;s &lt;del&gt;a short&lt;/del&gt; &lt;ins&gt;an incresingly
long&lt;/ins&gt; list to try out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marcinbunsch/bash_koans&quot;&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/torbjoernk/CppKoans&quot;&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/functional-koans/clojure-koans&quot;&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liammclennan/coffeescript-koans&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/lisp-koans&quot;&gt;Common Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/butlermatt/dart_koans&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CoryFoy/DotNetKoans&quot;&gt;DotNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dojo-toulouse/elixir-koans&quot;&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/patrickgombert/erlang-koans&quot;&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChrisMarinos/FSharpKoans&quot;&gt;F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cdarwin/go-koans&quot;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cjudd/groovy_koans&quot;&gt;Groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/HaskVan/HaskellKoans&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liammclennan/JavaScript-Koans&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/matyb/java-koans&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kikito/lua_missions&quot;&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chicagoruby/MongoDB_Koans&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/forcedotcom/PerlKoans&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/neo/ruby_koans&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mankyKitty/rust-koans&quot;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scalakoans.webfactional.com/&quot;&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hpi.uni-potsdam.de/hirschfeld/trac/SqueakCommunityProjects/wiki/smalltalk_koans&quot;&gt;Squeak/Pharo Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hpi.uni-potsdam.de/hirschfeld/trac/SqueakCommunityProjects/wiki/smalltalk_koans&quot;&gt;GNU Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;ve started the &lt;a href=&quot;https://github.com/functional-koans/clojure-koans&quot;&gt;Clojure Koans&lt;/a&gt;.
Where the Ruby Koans were verbose, these are terse.  I like terse. Very often
I felt like I was being told what to write as the answer to the Ruby Koans. That
was right for Ruby, but not for Clojure.&lt;/p&gt;

&lt;p&gt;So - go learn something new today!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java</title>
   <link href="http://gypsydave5.com/2014/11/12/java-java-java/"/>
   <updated>2014-11-12T12:20:08+00:00</updated>
   <id>http://gypsydave5.com/2014/11/12/java-java-java</id>
   <content type="html">&lt;p&gt;Java. Java is the
(&lt;a href=&quot;http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html&quot;&gt;second&lt;/a&gt;)
most popular programming language in the world. Java is over twenty years old.
Java is everywhere.&lt;/p&gt;

&lt;p&gt;Java is giving me a headache.&lt;/p&gt;

&lt;p&gt;Based on a job opportunity I started to try and learn Java last week. Flailing
around for guidance, Enrique told me to install an IDE. &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt; to be
precise - mainly to get something to manage my dependencies for me.. That&amp;#39;s
a whole story in itself, but I hacked around a bit, ran some tutorials, and
eventually I got a &lt;code&gt;Hello World&lt;/code&gt; out into the world. Finally
I understood why things in Java could be &lt;code&gt;public static void&lt;/code&gt;, finally
I understood the syntax. Squint a little and it just looks like JavaScript. Ish.&lt;/p&gt;

&lt;p&gt;Step two: testing. &lt;a href=&quot;http://junit.org/&quot;&gt;jUnit&lt;/a&gt; turned out to be a testing framework for Java
and should not be confused with &lt;a href=&quot;http://en.wikipedia.org/wiki/G-Unit&quot;&gt;G-Unit&lt;/a&gt;.  This I also got going, but not
without reservations. Turns out I don&amp;#39;t like IDEs, for some reason they make me
feel seperated from the code I&amp;#39;m writing.  Also I felt ike I didn&amp;#39;t have the
time to learn a whole new environment. I use &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;, and I use it on the command
line, and I like it that way.&lt;/p&gt;

&lt;p&gt;So I thought I&amp;#39;d try it from the command line. Not my greatest decision. You&amp;#39;ve
got two choices about how to manage dependencies and builds from the terminal:
&lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; and &lt;a href=&quot;http://www.gradle.org/&quot;&gt;Gradle&lt;/a&gt;. Maven uses XML to describe the project, one of my
least favourite formats to read (I think I&amp;#39;m faster reading binary), so
I settled rapidly on Gradle, which is actually written in &lt;a href=&quot;https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=groovy&quot;&gt;Groovy&lt;/a&gt;, a dynamic
language based on Java.&lt;/p&gt;

&lt;p&gt;But back to the command line. I did manage to manage my projects from there -
and it did give me a feeling of greater control than through the IDE. But it
also revealed what a lot of work the IDE was doing. I feel like I&amp;#39;ve been
relatively spoiled using &lt;a href=&quot;https://www.npmjs.org/&quot;&gt;npm&lt;/a&gt; and &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; - just &lt;code&gt;require&lt;/code&gt; what you
need and it&amp;#39;s there - magick. Java - even with &lt;a href=&quot;http://www.gradle.org/&quot;&gt;Gradle&lt;/a&gt;&amp;#39;s help - is horrible
to look at. A long mess of &lt;code&gt;com.something.somethingElse.someMethodHere&lt;/code&gt;, each
individual damn thing being summoned individually. And me with no idea
of how it all works. I can only imagine what it would be like without
a dependency manager helping out.&lt;/p&gt;

&lt;p&gt;I (by the end) managed to deploy a horrifically simple and untested app to
the &lt;a href=&quot;http://aws.amazon.com/elasticbeanstalk/&quot;&gt;AWS Elastic Beanstalk&lt;/a&gt;. But I never managed to get mocks in &lt;a href=&quot;https://code.google.com/p/mockito/&quot;&gt;Mockito&lt;/a&gt;
off the ground. And I never really felt like I knew what I was doing.&lt;/p&gt;

&lt;p&gt;But after a week of Java, and a week helping out with &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node&lt;/a&gt; at Makers,
getting my hands back on Ruby was lke coming home. How do I feel after
experiencing my first &lt;a href=&quot;http://en.wikipedia.org/wiki/Strong_and_weak_typing&quot;&gt;strongly typed&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Compiled_language&quot;&gt;compiled&lt;/a&gt; programming language?
Overall I&amp;#39;m OK. I learned a lot about &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;design patterns&lt;/a&gt; and the &lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;
principles - chiefly about where they&amp;#39;re from. A lot of the language about
interfaces makes a lot more sense when you&amp;#39;re building an interface seperately
and implementing it in one of perhaps many classes. And forcing me to declare
the type of returned object for each method (if any), and the type of each
argument, and especially whether they&amp;#39;re public or private, made me think harder
about methods in general.&lt;/p&gt;

&lt;p&gt;Travel broadens the mind!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Segmentation Fault</title>
   <link href="http://gypsydave5.com/2014/10/14/segmentation_fault/"/>
   <updated>2014-10-14T14:14:40+01:00</updated>
   <id>http://gypsydave5.com/2014/10/14/segmentation_fault</id>
   <content type="html">&lt;p&gt;This is dedicated to my mother. It&amp;#39;s her birthday today. It&amp;#39;s also &lt;a href=&quot;http://findingada.com/&quot;&gt;Ada Lovelace
day&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Ada_Lovelace&quot;&gt;Augusta Ada King, Countess Lovelace&lt;/a&gt;
was the daughter of a poet, a friend and collaborator with Babbage, a socialite
and a wit. She also wrote the world&amp;#39;s first computer program. If there were
a patron saint for the creative coder it would be her.&lt;/p&gt;

&lt;p&gt;Ada Lovelace day is a celebration of women in Science, Technology, Engineering
and Mathematics. It&amp;#39;s also a day to reflect on the issues that face women who
work in those fields. The biggest one being &amp;quot;Why are there so few women in tech?&amp;quot;&lt;/p&gt;

&lt;p&gt;Makers Academy is commited to equality - the first day here when I told my
partner how many women were students here she was surprised; &amp;quot;That many?&amp;quot;. I&amp;#39;m
rubbish at statitics, but looking around the room you could guess at maybe
40-50% are women. It&amp;#39;s a good sign.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re holding a round table discussion on Women in Tech today (which is another
good sign).&lt;/p&gt;

&lt;p&gt;One of the panel (I&amp;#39;m awful with names) has just said that he&amp;#39;s horrified, as
a father, about the segmentation that&amp;#39;s present in culture. He&amp;#39;s raising a son
to be as gender neutral as possible - as happy playing in a kitchen as with
a laptop. But he&amp;#39;s constantly battling against a culture that genders everything -
pink and blue Kinder eggs with Barbie and Transormers respectively was his
example.&lt;/p&gt;

&lt;p&gt;My mum can do the numbers challenge on &amp;#39;Countdown&amp;#39; faster than anyone I know.
She&amp;#39;d be disappointed if it wasn&amp;#39;t done &lt;em&gt;before&lt;/em&gt; Carol Vordeman pressed the
button. She hates the anagrams. She&amp;#39;s always hated the anagrams. I hate the anagrams
too. I love numbers because she loves numbers. If I&amp;#39;m good at coding then she&amp;#39;s had
a hand in that.&lt;/p&gt;

&lt;p&gt;She was told to be an English teacher when she was eighteen because she told the
careers adviser that she quite liked English. She went on the be an amazing and
dedicated teacher and retired this year. But what might she have done if she&amp;#39;d
said she liked maths? Or science? Or almost anything else? Maybe she&amp;#39;d be
a computer programmer now, retiring after a long life in COBOL and C and helping
me with my JavaScript. Or maybe not - she was an amazing teacher. But who knows!&lt;/p&gt;

&lt;p&gt;Or, worse, if her father hadn&amp;#39;t made her feel good and proud about being good at
maths? Where would I be if my mum &lt;em&gt;hadn&amp;#39;t&lt;/em&gt; liked puzzles and maths?&lt;/p&gt;

&lt;p&gt;The problem isn&amp;#39;t &amp;#39;inside&amp;#39; tech, it&amp;#39;s &lt;em&gt;throughout&lt;/em&gt; society and culture. It might
make you dispair. It makes me dispair sometimes. But don&amp;#39;t dispair - look, here -
I&amp;#39;ll summarise the roundtable &amp;#39;take away&amp;#39; actions for everyone to do. Fix the
world one stupid ignorant problem at a time.&lt;/p&gt;

&lt;h3&gt;Women&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Go talk to children about what you do.&lt;/li&gt;
&lt;li&gt;Call men out when they say something offensive or just plain wrong. They&amp;#39;re
proabably completely oblivious to the issue, so be polite.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Men&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Listen. And be there and be nice. But mainly listen more.&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t think it&amp;#39;s not problem; educate yourselves and recognise the
problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And one for everyone: &amp;#39;Own Your Ignorance&amp;#39; (now that&amp;#39;s wise) - don&amp;#39;t bluff it,
don&amp;#39;t fake it, don&amp;#39;t ignore it, don&amp;#39;t be scared of it. Your scope for
improvement &lt;em&gt;is&lt;/em&gt; your ignorance. (Maybe that should also involve owning &lt;em&gt;other&lt;/em&gt;
people&amp;#39;s ignorance too, feeding in to the points above...)&lt;/p&gt;

&lt;p&gt;Oh, and one I hadn&amp;#39;t heard before -- apparently the first version of Siri knew
how to get you to a stripclub but had no idea how to get you emergency
contraception.&lt;/p&gt;

&lt;p&gt;Sexism, whether deliberate or accidental, is, like all evil (I&amp;#39;ll stand briefly
with Plato on this) a consequence of ignorance of one form or another. Would you
trust a coder who wanted to be deliberately ignorant?&lt;/p&gt;

&lt;p&gt;Ignorance sucks.&lt;/p&gt;

&lt;p&gt;Happy Birthday Mum :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mocha tests with MongoDB and Mongoose</title>
   <link href="http://gypsydave5.com/2014/10/13/mocha_tests/"/>
   <updated>2014-10-13T22:23:50+01:00</updated>
   <id>http://gypsydave5.com/2014/10/13/mocha_tests</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been continuing my assault on Node.js - I refuse to let it lie. I decided
two weeks ago to try and get a version of the Makers Academy chitter project (a
twitter clone) up and running using Node, Express and - because you may as well
go straight in at the deep end - MongoDB. Let&amp;#39;s call it &amp;#39;Chitter.js&amp;#39;.&lt;/p&gt;

&lt;p&gt;The biggest pain I&amp;#39;ve had is getting the tests to run. This may not sound like
a big deal to someone on the outside, but without tests I feel a little lost --
I mean, how do you know if what you&amp;#39;re doing is working? Or your refactoring
hasn&amp;#39;t changed anything?&lt;/p&gt;

&lt;p&gt;Anyway, enough of the TDD rant - and maybe let&amp;#39;s just approach this as an
intellectual exercise. Mocha is the test framework we&amp;#39;re using -- along with
the Chai library of assertion (so I can write &lt;code&gt;expect&lt;/code&gt;) a lot.&lt;/p&gt;

&lt;p&gt;Now the first thing to bear in mind is just how asynchronous &lt;em&gt;everything&lt;/em&gt; is
when working in JavaScript. You may &lt;em&gt;think&lt;/em&gt; you understand, but you proaably
don&amp;#39;t. My entire cohort at Makers is replete with tales about testing in Mocha
(&amp;quot;It passed one time -- but then it didn&amp;#39;t&amp;quot; ... &amp;quot;I ran it, it should&amp;#39;ve failed.
But it passed. Twice.&amp;quot;).&lt;/p&gt;

&lt;p&gt;Happily Mocha gives us &lt;code&gt;done&lt;/code&gt;. You can pass any test block (OK, not block,
anonymous function. But I&amp;#39;m Ruby till I die) an argument of &lt;code&gt;done&lt;/code&gt;, which is
a function you can call when the test is... well, when the test is done. It
basically means that you can make thinga happen when you want them to happen,
and not in faster-than-a-speeding-bullet JS timeframes.&lt;/p&gt;

&lt;p&gt;So, here&amp;#39;s a test straight out of my actual project. The key thing to note is
the fact that the expectations are sitting in the callback for the &lt;code&gt;save&lt;/code&gt;
function - you&amp;#39;ll only want to test the database once the save has saved (i.e.
once its calledback).&lt;/p&gt;

&lt;p&gt;(The following is all in CoffeeScript - which I&amp;#39;m agnostic about. It definitely
has the advantage of brevity, which is a quality all of its own.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;saves users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;(done) -&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;bob = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pisswird&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;(error, saved_bob) -&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saved_bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saved_bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pisswird&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You would expect this to run, test the expectations, and then let you know it&amp;#39;s
all finished with the &lt;code&gt;done()&lt;/code&gt; call at the end of the callback. And it does do
exactly that -- but only so long as the expectations pass. If they don&amp;#39;t the
whole thing just times out - which is not what we&amp;#39;re after.&lt;/p&gt;

&lt;p&gt;I tried a number of solutions to this problem (in fact the above &lt;em&gt;is&lt;/em&gt; one of
those solutions - the first attempts were even more worthless), including a few
experiments with the &lt;a href=&quot;http://chaijs.com/plugins/chai-as-promised&quot;&gt;Chai as
Promised&lt;/a&gt; library which includes
such great statements as &lt;code&gt;to.eventually.deep.equal&lt;/code&gt; But the problem wasn&amp;#39;t
resolved until I hit upon the following pattern:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;saves users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;(done) -&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;user = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pisswird&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;(error, saved_user) -&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;saved_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What wizardry is this? Let me try to explain...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The reason everything timed out on the expectation failing was that the
expectation statement is no longer in the scope of the &lt;code&gt;it()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Expectations pass when they pass -- but when they fail they raise an
exception which is caught by the &lt;code&gt;it()&lt;/code&gt; function the whole lot is wrapped in.&lt;/li&gt;
&lt;li&gt;So when the statement goes out of scope, it means that the error never
&amp;#39;bubbles up&amp;#39; to the &lt;code&gt;it&lt;/code&gt;, the &lt;code&gt;done()&lt;/code&gt; never gets called, and the whole thing
just times out.&lt;/li&gt;
&lt;li&gt;So we need a way to send the error for the failed expectation up to the &lt;code&gt;it()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This is where the &lt;code&gt;try/catch&lt;/code&gt; comes in - if the expectation fails it raises an
error that then gets passed to the &lt;code&gt;done&lt;/code&gt; function in the catch - which the
&lt;code&gt;done&lt;/code&gt; then dutifully carries back up to the &lt;code&gt;it&lt;/code&gt; with the essential error
information about what exactly went wrong.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And so now we can write tests. Hurrah! But, more importantly, we&amp;#39;ve gained an
insight into how testing frameworks work. When I first encountered testing in
RSpec I went through the various patterns of test as ritual -- &amp;#39;this is how you
do it&amp;#39; -- but the more I work with tests the more I&amp;#39;m respecting the hard work
that&amp;#39;s gone in to making them look like magick.&lt;/p&gt;

&lt;p&gt;So I&amp;#39;m really greateful for Mocha being a bit of a pain to test with over the
last few weeks, as it&amp;#39;s made me have to think a bit harder about testing in
general and the dark arts of JS.&lt;/p&gt;

&lt;p&gt;That said, it&amp;#39;s not done much for the development of chitter.js...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Silence is the Enemy</title>
   <link href="http://gypsydave5.com/2014/10/07/silence/"/>
   <updated>2014-10-07T14:22:19+01:00</updated>
   <id>http://gypsydave5.com/2014/10/07/silence</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been thinking about this post for a few weeks, but &lt;a href=&quot;@benjilanyado&quot;&gt;Benji
Lanyado&lt;/a&gt; from &lt;a href=&quot;https://www.picfair.com/&quot;&gt;Picfair&lt;/a&gt; has just given
a great talk about starting his business. Great for a number of reasons (he&amp;#39;s
a very charismatic speaker to begin with), but the key thing I&amp;#39;m taking home
with me is what he&amp;#39;s just said about, well - talking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Talk to everyone. Get out of your flat.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;#39;s easy to forget that in a few weeks I&amp;#39;m not going to be around here at
Makers. And that the best thing - the &lt;em&gt;best&lt;/em&gt; thing - about being here is talking
to people.&lt;/p&gt;

&lt;p&gt;At every stage of coding - whether in solving a problem, learning a language,
fixing a bug - silence is the enemy. You know your pairing is going wrong when
nobody is saying anything. Say &lt;em&gt;something&lt;/em&gt;, even if you&amp;#39;re just restating the
problem. Pairing is made to make you talk about what&amp;#39;s going on - making your
brain work around the problem by putting it in your mouth. How incredible is
that?&lt;/p&gt;

&lt;p&gt;This becomes really apparent when you&amp;#39;ve been coding on your own for
a while. You tend to find yourself going crazy over small bugs that are really
apparent when you&amp;#39;re looking at them in someone else&amp;#39;s code. This is why &lt;a href=&quot;http://c2.com/cgi/wiki?RubberDucking&quot;&gt;rubber
ducking&lt;/a&gt; happens - that experience you&amp;#39;ve
had of going to someone for help and suddenly realizing the solution halfway
through explaing the problem to them - they&amp;#39;ve become your rubber duck (remember
to thank them with a quack).&lt;/p&gt;

&lt;p&gt;Same goes for teaching - the number of things I&amp;#39;ve got down solidly by having to
explain it to someone, out loud. It&amp;#39;s mind blowing. You can&amp;#39;t skip over anything
when you&amp;#39;re talking, your brain can&amp;#39;t trick you into false confidence by waving
its hands over a bit you don&amp;#39;t understand. I gave a talk about bitwise operators
a few days ago - I thought I had it all covered, but when I got a question about
&lt;a href=&quot;http://en.wikipedia.org/wiki/Two&amp;#x27;s_complement&quot;&gt;two&amp;#39;s complement&lt;/a&gt; it became
&lt;em&gt;really&lt;/em&gt; apparent that I didn&amp;#39;t have a clue. Embarassing? Yes, a little - but
now at least I know where I&amp;#39;m ignorant, rather than being surprised about it
later.&lt;/p&gt;

&lt;p&gt;Silence is the enemy of good and happy coding. Keep talking - even if it&amp;#39;s just
to yourself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Slaying The JavaScript Dragon</title>
   <link href="http://gypsydave5.com/2014/09/28/the_JS_dragon/"/>
   <updated>2014-09-28T21:27:05+01:00</updated>
   <id>http://gypsydave5.com/2014/09/28/the_JS_dragon</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Hey folks!&lt;/p&gt;

&lt;p&gt;The Node and JavaScript dragons have been hard to fight… Do you remember you
used to look at precious stones?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;#39;s how Enrique&amp;#39;s email introduced the Friday challenge at the end of week
8 at Makers. Week 8 has been Hell Week. It was a beasting. It was hard. It was
NodeJS.&lt;/p&gt;

&lt;p&gt;I was looking forward to this week more than any other - it&amp;#39;s a great idea. More
and more devs and companies are using Node, Rails is so opinionated as to be
stifiling - so why not do another week of JavaScript dedicated to Node? Throw
some CoffeeScript in there for good measure along with a seasoning of WebSockets
and you&amp;#39;ve got a recipe for succeess.&lt;/p&gt;

&lt;p&gt;Nope. See above. You&amp;#39;ve got a recipe for Hell Week.&lt;/p&gt;

&lt;p&gt;JavaScript was a severe shock to the system for everyone. I was already
relatively comfortable with the language - it wasn&amp;#39;t entirely new to me. But
I still struggled with getting Express and Node.&lt;/p&gt;

&lt;p&gt;I knew that JS was asynchronous - but I didn&amp;#39;t really &lt;em&gt;know&lt;/em&gt; it, if you take my
meaning. The difference between Sinatra and Express became apparent from the
beginning. Where on Sinatra it was fairly easy to get RSpec and Capybara
performing tests out of the box, with Mocha it felt like I was contantly and
actively fighting against the framework. Callbacks came back unexpectedly or not
at all. Tests passed - twice - when they should&amp;#39;ve failed.&lt;/p&gt;

&lt;p&gt;The final straw came when we collectively couldn&amp;#39;t get read/write operations
working consistently. I suddenly realised how spoiled I&amp;#39;ve been by using Ruby,
RSpec et al -- these are really mature pieces of software that act as you
expect. I feel that Node and Express are amazing - don&amp;#39;t get me wrong. But
I&amp;#39;ve found it nigh-on impossible to test them.&lt;/p&gt;

&lt;p&gt;And if you can&amp;#39;t test it, then it doesn&amp;#39;t exist.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m still pressing on with Node/Express on the side, because I do really enjoy
the environment to work in. I just need to slay the Mocha dragon and everything
will be fine.&lt;/p&gt;

&lt;p&gt;The Ruby refresher that was presented as the weekend work was like a beautiful
sorbet - so refreshing after the hard week. As I answered the questions with
simple one-liner methods I realised exactly how much I&amp;#39;d learned in the last
eight weeks. I feel like I&amp;#39;ve got a firm foothold in the Ruby world.&lt;/p&gt;

&lt;p&gt;Now on to the Mocha.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Data Mapper Woes</title>
   <link href="http://gypsydave5.com/2014/09/20/data_mapper/"/>
   <updated>2014-09-20T21:27:05+01:00</updated>
   <id>http://gypsydave5.com/2014/09/20/data_mapper</id>
   <content type="html">&lt;p&gt;I love &lt;a href=&quot;http://datamapper.org/&quot;&gt;DataMapper&lt;/a&gt;, the lightweight Object Relational
Mapper for Ruby. We&amp;#39;ve been using it with Sinatra. It&amp;#39;s skinny, it&amp;#39;s simple,
it&amp;#39;s clever, it makes the right tables happen in Postgres and the syntax is
surprisingly simple. For instance, the email field for a user table:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Look! It&amp;#39;s amazing -- not only do we set the property, but we&amp;#39;ve made it
required and unique, and we&amp;#39;ve validated that it&amp;#39;s an email address. Amazing!&lt;/p&gt;

&lt;p&gt;I love it, but like all wonderful DSLs when it&amp;#39;s good it&amp;#39;s very very good, but
when it&amp;#39;s bad it&amp;#39;s &lt;em&gt;horrid&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the example I was working on I was creating a user which could be associated
with many posts - it was a basic Twitter like app. The user had some
requirements as above - specifically those listed for the email, but also that
the user name was unique and that the password was more than six characters
long. So far so incredibly boring.&lt;/p&gt;

&lt;p&gt;I set the wheels in motion, I write a feature test in Cucumber to see if as
a user, when logged in, and I create a new post, then the post count goes up by
one (I like speaking in Gherkin). Everything looked OK - but the post wasn&amp;#39;t
saving. And there were no useful error messages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://alexpeattie.com/&quot;&gt;Alex Peattie&lt;/a&gt; is a hero. He&amp;#39;s left Makers now, but
before he did he hacked through what was going on with my problem. And I mean
hacked in the manner of destroying briar patches and slaying dragons - my mouth
dropped in awe as he systematically got to the source of the problem (&amp;quot;So, let&amp;#39;s
force it to save...  it saves the post fine, but doesn&amp;#39;t update the user...
hmmm...&amp;quot;), then started dropping &lt;code&gt;puts&lt;/code&gt; into the DataMapper source code after
identifying the problematic lines in the backtrace.&lt;/p&gt;

&lt;p&gt;As it turns out, it was the password length that was the problem. As the User
was being updated with the new post it is being associated with, the password
requirement (6 letters or more) was kicking in - even when no password was
being submitted with the update. So the post was fine - just the user didn&amp;#39;t,
and so prevented the post from saving.&lt;/p&gt;

&lt;p&gt;Simple to fix (just tell the user model to only validate password length on
creation), but difficult to identify. I won&amp;#39;t make that mistake again, but Alex
remains my hero for sorting that out (and giving a great demonstration
debugging). &lt;a href=&quot;http://alex-farewell-card.herokuapp.com/&quot;&gt;We all miss him&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Environmentalism</title>
   <link href="http://gypsydave5.com/2014/09/12/environmentalism/"/>
   <updated>2014-09-12T21:17:05+01:00</updated>
   <id>http://gypsydave5.com/2014/09/12/environmentalism</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve never really seen the point of environment variables until today. They&amp;#39;ve
been slowly introduced into the syllabus at Makers during the bookmark manager
project. To start with they were a way determine which database to use; whether
the one for the test suite or the one for playing around on the local server.&lt;/p&gt;

&lt;p&gt;Something like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;RACK_ENV&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;development&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DataMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;postgres://localhost/bookmark_manager_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which is all well and good. Then it comes to getting the app up - let&amp;#39;s say on
Heroku.&lt;/p&gt;

&lt;p&gt;Heroku has PostgreSQL support, so that&amp;#39;s taken care of by adding a plugin on the
dashboard. Tick. Pushing the application to Heroku is easy enough (as long as
you haven&amp;#39;t spelled &lt;code&gt;Gemfile&lt;/code&gt; in all caps at any point in your Git history. Who
would do that?). But then you hit the buffers, because the database isn&amp;#39;t where
you&amp;#39;ve told Sinatra it is.&lt;/p&gt;

&lt;p&gt;So where is it? Hiding somewhere over at Amazon apparently. If you run &lt;code&gt;heroku
config&lt;/code&gt; you&amp;#39;ll see a great (OK, tiny) stack of... you guessed it... environment
variables. The two key ones to look at are &lt;code&gt;DATABASE_URL&lt;/code&gt; and
&lt;code&gt;HEROKU_POSTGRES_PINK_URL&lt;/code&gt;. Next to them both is a long URL that lets you know
that the nice folks at Amazon are taking care of your instance of Postgres on
the behalf of Heroku.&lt;/p&gt;

&lt;p&gt;So we just jam that URL into the DataMapper setup right?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ruby DataMapper.setup(:default,
&amp;quot;postgres://whole-mess-of-letters.compute-1.amazonaws:porty_goodness_here&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wrong. That URL is a magic number, it&amp;#39;s specific to the Heroku server you&amp;#39;re
pushing to. But what about James? What about Vincent? Maybe they want to have an
instance of their own. Or what if Heroku go and migrate your database to another
cloud supplier? Bad times.&lt;/p&gt;

&lt;p&gt;Environment variables to the rescue. Look, it&amp;#39;s right there in the config:
&lt;code&gt;DATABASE_URL&lt;/code&gt;. Just jam that sucker into the DataMapper setup. Of course, you
need to make sure that you&amp;#39;re using it in Heroku, so maybe some sort of &lt;code&gt;if&lt;/code&gt;
statement to make sure you&amp;#39;re using it in the right place. Not pretty, but...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/heroku/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DataMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;DATABASE_URL&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DataMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;postgres://localhost/bookmark_manager_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Environment variables. No longer a &amp;#39;nice to have&amp;#39;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>For fun!</title>
   <link href="http://gypsydave5.com/2014/09/09/for-fun/"/>
   <updated>2014-09-09T21:27:05+01:00</updated>
   <id>http://gypsydave5.com/2014/09/09/for-fun</id>
   <content type="html">&lt;p&gt;So the last post was a bit of a downer, right? I thought I&amp;#39;d get it down while
things were still fresh in the mind.&lt;/p&gt;

&lt;p&gt;But things aren&amp;#39;t bad at all. Makers remains a lot of fun - if you&amp;#39;re in a bit
of a funk the general environment of fun just pulls you through. With running
(yeah, back to running) you&amp;#39;re not just interested in making the distance
- running in and of itself is fun. Believe me, the best days of running I&amp;#39;ve had
are ones where I find a comfortable pace and just see where that quiet country
lane will take me. Preferably in beautiful sunshine.&lt;/p&gt;

&lt;p&gt;Likewise coding. No, really.&lt;/p&gt;

&lt;p&gt;A few days ago &lt;a href=&quot;https://twitter.com/optilude&quot;&gt;Martin Aspell&lt;/a&gt;
from &lt;a href=&quot;http://www.deloittedigital.com/us/&quot;&gt;Deloitte Digital&lt;/a&gt; came in and gave us
a lunchtime presentation. The lunchtime presentations at Makers are one of the
best perks of being here. You sit on beanbags while people from the industry
come and talk to you for twenty minutes about what they do. This can be as
diverse as data security, insurance databases, restaurant bookings and -
I&amp;#39;ll write about this later - and a fantastic talk from &lt;a href=&quot;http://www.deloittedigital.com/us/&quot;&gt;Rozemary
King&lt;/a&gt; from Pivotal labs about Product
Management (amazing insight into how an agile process is managed in the
trenches).&lt;/p&gt;

&lt;p&gt;But back to Martin. He gave a talk about his life, what he&amp;#39;s done and worked on
and a little about Deloitte Digital as well. What stuck with me most was
something he said about his relationship with writing code: he comapred it to an
addiction. He finds it relaxing - he said it calms him down in the evening, like
doing a crossword or sudoku.&lt;/p&gt;

&lt;p&gt;I thought it sounded a little mad, but he&amp;#39;s right. The last few days I&amp;#39;ve been
taking breaks from the course by rewriting the Battleships project, playing
around with ideas and seeing what works. And for fun!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Wall (and getting over it)</title>
   <link href="http://gypsydave5.com/2014/09/05/the-wall/"/>
   <updated>2014-09-05T21:24:16+01:00</updated>
   <id>http://gypsydave5.com/2014/09/05/the-wall</id>
   <content type="html">&lt;p&gt;Ever run a marthon? No, me neither. I&amp;#39;ve run a few halfs, so let&amp;#39;s pretend
that&amp;#39;s adequate experience to talk about marathon running.&lt;/p&gt;

&lt;p&gt;Long distance runners talk about this moment when the glycogen in your body runs
out entirely. You&amp;#39;ll get about two hours, maybe more if you train. But it&amp;#39;ll
happen, and all your energy just - goes. Seratonin levels go up, which might
sound fun until I tell you that your dopamine goes down as well. This might be
causing some of the little voices in your head to tell you that you can&amp;#39;t do
it. You may hallucinate. You may not be able to stand.&lt;/p&gt;

&lt;p&gt;I hit the mental equivalent of the wall sometime over the week we started
learning &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; at Makers. I&amp;#39;d done my preparation,
I&amp;#39;d learned and digested solidly. I&amp;#39;d say I was one of the better prepared for
the next twelve weeks.&lt;/p&gt;

&lt;p&gt;But you can only delay the wall - you can&amp;#39;t put it off entirely. I ran out of
whatever mental stamina I had. And it hurt. A lot.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Depressesed? Disheartened? Hate coding? Hate what you&amp;#39;re doing to yourself? Hate
Sinatra (the framework)? Hate Sinatra (the singer)? Wonder what you&amp;#39;re still
doing here? How *can* anyone learn to code in twelve weeks? Stupid. Impossible.
You&amp;#39;d be better back at the library. Hell, you&amp;#39;d be better back at the cannary.
Stupid brain that won&amp;#39;t work. Stupid.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can reach for another running metaphor: second wind. Even at the point of
greatest exertion, you can find a way to carry on. Going even faster sometimes.
Like you can push through the wall and find yourself suddenly back to normal
again.&lt;/p&gt;

&lt;p&gt;This happened too - and kept happening. Because I didn&amp;#39;t just hit one wall. I&amp;#39;ve
hit at least three since the first one. You get &lt;em&gt;used&lt;/em&gt; to it. Flailing ignorance
and mental exhaustion is aleviated by the next piece of hard-won knowldege and
skill.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve found relaxation to be as important as work. I&amp;#39;m reading fiction again,
getting to bed in good time, appreciating a quiet beer. Taking your mind off the
problem until it&amp;#39;s ready to be solved.&lt;/p&gt;

&lt;p&gt;Thinking about philosophy, and Deleuze &amp;amp; Guattari&amp;#39;s &lt;a href=&quot;http://en.wikipedia.org/wiki/A_Thousand_Plateaus&quot;&gt;A Thousand
Plateaus&lt;/a&gt;, I think of the
organism that can only grow by dying a little every day. Growth is painful.
Growth is hard. But nothing worthwhile was ever easy.&lt;/p&gt;

&lt;p&gt;You beat it. I couldn&amp;#39;t do Sinatra, I couldn&amp;#39;t make it do what I wanted it to
do. But I made it do something, learned my limitations. And I enjoyed myself.
And now &lt;a href=&quot;http://rpssd.gypsydave5.com/&quot;&gt;you can play with it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The pace is picking up this week. Last week threw Sinatra in our faces. This
week is databases. Learning to program is one thing - keeping all these spinning
plates up in the air at the same time is another.&lt;/p&gt;

&lt;p&gt;And only half the race run.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lessons Learned</title>
   <link href="http://gypsydave5.com/2014/08/24/lessons_learned/"/>
   <updated>2014-08-24T11:20:19+01:00</updated>
   <id>http://gypsydave5.com/2014/08/24/lessons_learned</id>
   <content type="html">&lt;p&gt;Things I&amp;#39;ve learned so far from my teachers:&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://twitter.com/Stephen_lloyd&quot;&gt;Stephen&lt;/a&gt; - Succinct Semantics&lt;/h3&gt;

&lt;p&gt;I felt a little smug about my code when Steve sat next to me to see how I was
doing. I was seeing if there were any broken bikes in an array, something like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bikes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;broken?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;He took a quick look and pointed out that this was a little on the long side.
Does Ruby have an &lt;code&gt;any?&lt;/code&gt; method for &lt;code&gt;Array&lt;/code&gt;s? Sure enough, there in &lt;code&gt;Enumerable&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bikes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;broken?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better. I would have been happy. But Steve then says, try passing a the symbol
for &lt;code&gt;broken?&lt;/code&gt; as a proc - something I&amp;#39;d seen and not used.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bikes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:broken?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See how that&amp;#39;s better? It says exactly what it does? Yes, I did. And I&amp;#39;d learned
that you don&amp;#39;t have to sacrifice succinctness to semantics and vice versa. Ruby
has enough well-named methods and techniques to create a short statement that
someone who didn&amp;#39;t know Ruby would still understand. Lesson learned.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://twitter.com/liviu_23&quot;&gt;Mihai&lt;/a&gt; - Delete Your Code&lt;/h3&gt;

&lt;p&gt;I asked Mihai for some help changing my tests for the Boris Bikes project. I was
trying to change the RSpec tests I&amp;#39;d written from &lt;a href=&quot;http://programmers.stackexchange.com/questions/123627/what-are-the-london-and-chicago-schools-of-tdd&quot;&gt;Chicago to London
style&lt;/a&gt; having just been shown how to do doubles.&lt;/p&gt;

&lt;p&gt;Start again, Mihai said. Don&amp;#39;t be precious or treasure what you&amp;#39;ve written
- just get rid of it and start again. You&amp;#39;ll learn more that way.&lt;/p&gt;

&lt;p&gt;Since then I&amp;#39;ve taken immense pleasure in wiping entire projects out. And
learned more by doing that. Lesson learned.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://twitter.com/ecomba&quot;&gt;Enrique&lt;/a&gt; - Cooking without ever having have Eaten&lt;/h3&gt;

&lt;p&gt;Late in the day I asked Enrique about program design. I was worried, really
worried, that I didn&amp;#39;t know the right way to proceed with writing a program.
He&amp;#39;d just introduced the idea of design patterns that day, so I asked him to
recommend a book, or a checklist, or a mantra - the best way to learn some
patterns.&lt;/p&gt;

&lt;p&gt;Even as I spoke, Enrique started moving him hands, miming typing in front of me.
Remember what I said earlier, he said, about coding being entirely artificial.
It&amp;#39;s not like cooking where you know what food is and what it tastes like. It&amp;#39;s
like cooking when you&amp;#39;ve never eaten food, have no idea what good or bad food
tastes like. The only way you&amp;#39;ll learn is by writing code, a lot of code. Then
your instincts, your taste and intuition, will improve.&lt;/p&gt;

&lt;p&gt;It was only later that I connected this advice up with &lt;a href=&quot;http://en.wikipedia.org/wiki/Henri_Bergson#Creativity&quot;&gt;Bergson&amp;#39;s ideas about
creativity, specifically the swimming example&lt;/a&gt;. You wouldn&amp;#39;t think
a person could swim if you only ever saw them walk, the argument goes. For
swimming to be intellectually comprehendable, you&amp;#39;ve got to throw yourself in
the water first. You can&amp;#39;t theorize about things you haven&amp;#39;t done - intuition
must take the lead, intelligence is a not a speculative faculty, but a practical one.&lt;/p&gt;

&lt;p&gt;Mind blown, I staggered home, ignored &lt;em&gt;The RSpec Book&lt;/em&gt; and wrote more code.
Lesson learned.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitwise and Permission</title>
   <link href="http://gypsydave5.com/2014/08/16/bitwise-and-permissions/"/>
   <updated>2014-08-16T21:32:45+01:00</updated>
   <id>http://gypsydave5.com/2014/08/16/bitwise-and-permissions</id>
   <content type="html">&lt;p&gt;So I thought I&amp;#39;d try and write about what happened last day of the first week at
&lt;a href=&quot;http://www.makersacademy.com/&quot;&gt;Makers&lt;/a&gt;, as mentioned in &lt;a href=&quot;/2014/08/09/makers-day-five/&quot;&gt;my last post&lt;/a&gt;, about the failing RSpec test for
the Unix task. Just because I learned a lot about both permissions on a Unix
like system, about bitwise operators in Ruby, about how RSpec works, and how
(not) to fix things.&lt;/p&gt;

&lt;p&gt;So... the test checking file permissions in a directory by running the following
RSpec test.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Should only allow the owner to change into my/private/files&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my/private/files&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we first ran it, it failed on the first expectation above - even though we
knew that the file had the right permissions. So what was going on - both in
terms of how it was meant to work, and why it wasn&amp;#39;t working?&lt;/p&gt;

&lt;h2&gt;Permissions&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start with that first expectation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;permissions&lt;/code&gt; is a variable representing the result of &lt;code&gt;File.stat(folder).mode&lt;/code&gt;,
where &lt;code&gt;folder&lt;/code&gt; is the directory being checked. The &lt;code&gt;mode&lt;/code&gt; method &lt;a href=&quot;http://www.ruby-doc.org/core-2.1.2/File/Stat.html#method-i-mode&quot;&gt;returns the
permissions-bits of the Unix &lt;code&gt;stat&lt;/code&gt; command&lt;/a&gt; - which you can take
a look at in detail with a quick &lt;code&gt;man stat -a&lt;/code&gt; (as it&amp;#39;s &lt;code&gt;stat(2)&lt;/code&gt; you&amp;#39;re looking
at.&lt;/p&gt;

&lt;p&gt;What does all this mean? It means that we&amp;#39;re getting back an integer which
represents the current permissions on the file. And how does an integer
represent permissions? If you&amp;#39;ve been using &lt;code&gt;chmod&lt;/code&gt; to change permission with
commands like &lt;code&gt;chmod go-w filename&lt;/code&gt; (remove write from group and others), well
- you&amp;#39;ve been missing a trick and a whole lot of fun.&lt;/p&gt;

&lt;p&gt;The fun way to set permission is using the &lt;em&gt;absolute mode&lt;/em&gt;, which sets the
permissions absolutely every time you use it (rather than relatively removing or
adding them from the current state - see &lt;code&gt;man chmod&lt;/code&gt; for more). There are three
settings (read, write and execute) for each of the three permissions groups
(user, group, other) on a file. Each of those permissions sets is represented
by a single octal digit (from 1 to 7), and the settings are literally added to
each one - the setting for read is 4, write is 2 and execute is 1.&lt;/p&gt;

&lt;p&gt;Any combination of these numbers will produce a unique number - read + write
= 6, write + execute = 3, just read = 4. And you can combine them into
a three-digit octal number which represents the file permissions for any given
file, where the first digit is user, the second is group and the third is other.&lt;/p&gt;

&lt;p&gt;In practice: &lt;code&gt;chmod 777&lt;/code&gt; gives permissions for everything. &lt;code&gt;chmod 644&lt;/code&gt; gives
read/write to user, and just read to group and other. &lt;code&gt;755&lt;/code&gt; is
read/write/execute for user, and just read/execute for the group and other.&lt;/p&gt;

&lt;h2&gt;The science &amp;quot;bit&amp;quot;&lt;/h2&gt;

&lt;p&gt;Notice how none of the octal numbers ever &amp;#39;carry&amp;#39; over to the next one when
they&amp;#39;re added together? This is a piece of computer science wizzardry - because
they&amp;#39;re in octal, I can look at them as both an actual integer or as a series of
switches (or maybe dials), setting permissions for each permissions group up and
down. Thing is, for your computer, these two ways of looking at it &lt;em&gt;are exactly
the same&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;777&lt;/code&gt; in decimal notation is &lt;code&gt;511&lt;/code&gt; (do the maths if you like), but also has
a binary representation of... &lt;code&gt;111111111&lt;/code&gt;. Hey, look - all the 1s! It&amp;#39;s like all
the switches are turned on - and they really are!. This is because octal digits
map really neatly to binary digits - they&amp;#39;re a three-digit long collection of
binary digits. &amp;#39;Binary digit&amp;#39; is a bit of a mouthful (pun intended), so let&amp;#39;s
use the shorthand word - bit. Each set of three bits represents one of the
permission statuses for a particular permissions set. So the first three 1s
above are the permissions for the user, and in particular the first one is the
read, second write and the third the execute - all set to 1 or &amp;#39;on&amp;#39;.&lt;/p&gt;

&lt;p&gt;(Experiment in a Ruby repl like pry or irb - you can switch between binary,
octal and decimal really quickly in Ruby. Any integer you type in with a leading
&lt;code&gt;0&lt;/code&gt; (say &lt;code&gt;0777&lt;/code&gt;) will automatically be translated as an octal (&lt;code&gt;0777&lt;/code&gt; will
return &lt;code&gt;511&lt;/code&gt; - the decimal representation). And you can flip to a binary
representation with &lt;code&gt;to_s(2)&lt;/code&gt; - the &lt;code&gt;(2)&lt;/code&gt; setting the base of the conversion, so
that &lt;code&gt;0777.to_s(2)&lt;/code&gt; will return &lt;code&gt;&amp;quot;111111111&amp;quot;&lt;/code&gt;. Try some other numbers!)&lt;/p&gt;

&lt;p&gt;So when &lt;code&gt;mode&lt;/code&gt; returns an integer, it&amp;#39;s the integer that represents the current
permissions on that file - a file with read, write and exeute permissions for
all the sets would give you the number &lt;code&gt;511&lt;/code&gt; (which is the same as &lt;code&gt;777&lt;/code&gt; and
&lt;code&gt;111111111&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;Bitwise&lt;/h2&gt;

&lt;p&gt;Now we get to the fun stuff - &lt;code&gt;permissions &amp;amp; 0000100&lt;/code&gt;. What&amp;#39;s the &lt;code&gt;&amp;amp;&lt;/code&gt; doing? And
those leading 0s? As mentioned above, the leading zeroes are just Ruby&amp;#39;s way of
saying that this number is in octal. So (repls open) &lt;code&gt;0000100&lt;/code&gt; just becomes
&lt;code&gt;64&lt;/code&gt;. But the thing doing the work here is &lt;code&gt;&amp;amp;&lt;/code&gt; - not our friendly Boolean &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;,
but a differnent beast - this is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Bitwise_operation#AND&quot;&gt;&lt;strong&gt;bitwise AND&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bitwise operators, of which &lt;code&gt;&amp;amp;&lt;/code&gt; is an example, really tear the lid off the
computer and get a little bit closer to the bare metal. Computers aren&amp;#39;t made of
objects, or lines of code, strings and integers. They&amp;#39;re made of 0s and 1s. And
bitwise operators work on 0s and 1s - or, specifically, binary numbers.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a pair of binary numbers, say &lt;code&gt;111&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; (known to you and me as
7 and 4). Bitwise AND compares the bit in each position, and asks the question
&amp;quot;are you both &lt;code&gt;1&lt;/code&gt;?&amp;quot; If they are, you get a &lt;code&gt;1&lt;/code&gt;, otherwise it&amp;#39;s a &lt;code&gt;0&lt;/code&gt;. So &lt;code&gt;111
&amp;amp; 100&lt;/code&gt; will return &lt;code&gt;100&lt;/code&gt; as the third bit (counting from the right) is the only
one that matches in each number&lt;/p&gt;

&lt;p&gt;(Think of it just like a regular logical AND - but &lt;code&gt;1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; is
&lt;code&gt;false&lt;/code&gt; - running on each bit position.)&lt;/p&gt;

&lt;p&gt;We now have enough knowledge to look at the test again&lt;/p&gt;

&lt;h2&gt;Back to the test&lt;/h2&gt;

&lt;p&gt;To recap, the test looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Should only allow the owner to change into my/private/files&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my/private/files&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key line being:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s pretend that the directory currently has permissions of &lt;code&gt;700&lt;/code&gt; - read,
write and execute (&amp;#39;execute&amp;#39; is &amp;#39;open&amp;#39; for a folder -- allowing you to &lt;code&gt;cd&lt;/code&gt; into
it). We run &lt;code&gt;mode&lt;/code&gt; on it and get the permissions integer back - in octal, that&amp;#39;s
&lt;code&gt;700&lt;/code&gt; again. We then run a bitwise AND - the &lt;code&gt;&amp;amp;&lt;/code&gt; against it using the octal
number &lt;code&gt;100&lt;/code&gt; (all those &lt;code&gt;0&lt;/code&gt;s at the beginning are just saying &amp;#39;hey! I&amp;#39;m octal!&amp;#39;
to Ruby).&lt;/p&gt;

&lt;p&gt;Converting octal to binary, &lt;code&gt;700&lt;/code&gt; is &lt;code&gt;111000000&lt;/code&gt;, and &lt;code&gt;100&lt;/code&gt; is &lt;code&gt;1000000&lt;/code&gt; (Don&amp;#39;t
trust me? Fire up a repl!). Maybe think of &lt;code&gt;1000000&lt;/code&gt; as &lt;code&gt;001000000&lt;/code&gt; for the next
bit. Comparing the two binary numbers, the only place they match is at the
seventh bit - and so we get &lt;code&gt;1000000&lt;/code&gt; as the returned value. Which, in octal is
&lt;code&gt;100&lt;/code&gt; and in decimal is &lt;code&gt;64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The neat thing about this is that it will return &lt;code&gt;64&lt;/code&gt; for any permission set
that includes user executable permission on a file - &lt;code&gt;700&lt;/code&gt;, &lt;code&gt;500&lt;/code&gt;, &lt;code&gt;177&lt;/code&gt;, &lt;code&gt;355&lt;/code&gt;,
&lt;code&gt;777&lt;/code&gt; -- they &lt;em&gt;all&lt;/em&gt; work. Say we&amp;#39;ve got &lt;code&gt;355&lt;/code&gt; - in binary that&amp;#39;s &lt;code&gt;011101101&lt;/code&gt;.
&lt;code&gt;&amp;amp;&lt;/code&gt;ing it with &lt;code&gt;001000000&lt;/code&gt; again will give us... &lt;code&gt;001000000&lt;/code&gt; again - hey, it&amp;#39;s
&lt;code&gt;64&lt;/code&gt;! Try it with as many numbers as you like.&lt;/p&gt;

&lt;p&gt;The other two tests are to check whether the Group or Other sets also have
execute permission -- that&amp;#39;s &lt;code&gt;010&lt;/code&gt; becoming &lt;code&gt;000001000&lt;/code&gt; and &lt;code&gt;001&lt;/code&gt; to
&lt;code&gt;000000001&lt;/code&gt;, bitwised against the permissions making sure they &lt;em&gt;don&amp;#39;t&lt;/em&gt; have that
bit set. They come out as &lt;code&gt;0&lt;/code&gt; -- no matches!&lt;/p&gt;

&lt;p&gt;And so that&amp;#39;s how it all hangs together. But why didn&amp;#39;t it work? Simply put
everyone on the course had just installed the latest version of RSpec, and
&lt;code&gt;be_true&lt;/code&gt; is not in the latest version&amp;#39;s syntax. So all we needed to do was
change &lt;code&gt;be_true&lt;/code&gt; over to &lt;code&gt;eq(64)&lt;/code&gt; and it would&amp;#39;ve been fixed.&lt;/p&gt;

&lt;p&gt;Of course, that&amp;#39;s not what we &lt;em&gt;actually&lt;/em&gt; did. What we did was hack around until
it worked, and even then we ended up with &lt;code&gt;is_not eq(0)&lt;/code&gt; instead of the neater
(and more correct) answer of &lt;code&gt;eq(64)&lt;/code&gt;. It was only when thinking about it over
the weekend that I really got a handle on what was going on&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Makers: day 5</title>
   <link href="http://gypsydave5.com/2014/08/09/makers-day-five/"/>
   <updated>2014-08-09T17:21:36+01:00</updated>
   <id>http://gypsydave5.com/2014/08/09/makers-day-five</id>
   <content type="html">&lt;p&gt;I thought I&amp;#39;d be writing a blog post everyday about my experience at
&lt;a href=&quot;http://www.makersacademy.com/&quot;&gt;Makers&lt;/a&gt;. Or at least every two days. That went out of the window pretty
damn quickly. Things move quickly, so let&amp;#39;s go for a quick update and review
before I get along with my Saturday...&lt;/p&gt;

&lt;h2&gt;Day -2&lt;/h2&gt;

&lt;p&gt;Headed to the graduation of the cohort 12 weeks ahead of ours and met some of
the guys joining me in the August group, as well as the &amp;#39;seniors&amp;#39; (that&amp;#39;s
seniors by a full 6 weeks -- I don&amp;#39;t thinks they&amp;#39;ll be taking my lunch money).
Got to see the different final projects that had been created -- really
beautiful stuff such as the artist portfolio site, and a fun way to work out
which film to watch with your friends using the IMDB API. I was struck with how
polished these projects looked - fleshed out and beautiful.&lt;/p&gt;

&lt;h2&gt;Day 0&lt;/h2&gt;

&lt;p&gt;First day. Start early and meet everyone. We all introduce each other with
interesting facts (much antipathy towards mushrooms), and the Makers team do the
same. Many of the names have sinces wondered off into the sunset of my memory,
but we&amp;#39;re mainly being taught by &lt;a href=&quot;https://github.com/ecomba&quot;&gt;Enrique&lt;/a&gt;, &lt;a href=&quot;https://github.com/Stephen_lloyd&quot;&gt;Stephen&lt;/a&gt; and &lt;a href=&quot;https://github.com/roidriscoll&quot;&gt;Roi&lt;/a&gt; who&amp;#39;s the TA
(and who has &lt;em&gt;only just finished the course&lt;/em&gt; -- amazing) at the moment.&lt;/p&gt;

&lt;p&gt;Our first challenge is to get set up and create a web app that generates
motivational posters from a Google image search. In one day. And, amazingly, we
all manage it. There&amp;#39;s some pretty hairy moments to begin with (imagine a room
full of people all downloading the same software at the same time using the same
WiFi). But it happens.&lt;/p&gt;

&lt;p&gt;I asked Enrique whether I should stick with the Linux laptop or try out one of
the MacBook Pros the Makers kindly offer for students to borrow during the
course. He used to use Linux himself but was converted in a single day having
borrowed a friend&amp;#39;s. So I thought I&amp;#39;d try it out...&lt;/p&gt;

&lt;p&gt;I&amp;#39;m typing this on the Mac. Enough said.&lt;/p&gt;

&lt;h2&gt;Day 1&lt;/h2&gt;

&lt;p&gt;And it&amp;#39;s straight into the first project - creating a student directory for our
cohort using Ruby and the command line. We&amp;#39;re all at different levels of
experience at the moment - I&amp;#39;d describe myself as confident with a CLI and Ruby
having prepared (over-prepared?) extensively for the last few... months (I was
just looking at GitHub and I&amp;#39;ve been pushing there since February. Time flies!).
The exercises are kept as a text document on GitHub with links to pills on how
to use Git and the Unix command line. I pair with &lt;a href=&quot;https://github.com/flickoid&quot;&gt;Chris&lt;/a&gt; who I&amp;#39;d met on the
open day. We have a great time getting through the work.&lt;/p&gt;

&lt;h2&gt;Day 2&lt;/h2&gt;

&lt;p&gt;There are lectures throughout the day -- one in the morning and one in the
afternoon -- with additional talks during the day from other people coming in to
the building. Today was the turn of the technology heads from &lt;a href=&quot;http://www.typematrix.com/&quot;&gt;Compare the
Market.com&lt;/a&gt; to talk to us. It was interesting to hear them talk about
how their technology and culture had chnged over the last ten years, especially
the shift to an Agile culture. The more I hear and read about Agile the more
excited it makes me feel about working as a programmer - not just writing code
but having a wide-ranging input into what is being developed. It was also cool
to hear the coders described as being, essentially, &amp;#39;customer-facing&amp;#39; -- that
they were the closest staff memebers to actual customer experience and so were
expectd to both feedback as such, generate ideas, and importantly care for the
web app all the time, with flexible working hours. I&amp;#39;d never thought of it that
way, but in a world where a company&amp;#39;s only contact with their customers is
through the web, coders become the customer facing members of staff with all th
responsibility that entails.&lt;/p&gt;

&lt;p&gt;We also get talks from the cohort above us -- the seniors. It&amp;#39;s great seeing
these guys wanting to pass on the knowledge, the hints, the tricks -- everything
they&amp;#39;ve picked up in the last few weeks, on to us. This tradition started
spontaneously but fits so well with the ethos of Makers. I&amp;#39;m looking forward to
maybe doing one myself.&lt;/p&gt;

&lt;p&gt;Erique talks about his keyboard layout for five minutes today -- well maybe more
than five minutes. Not only is he a Vi(m) weezard but he also uses (1) COLMAC
layout on both (2) the MacBook if he&amp;#39;s out and about or (3) the &lt;a href=&quot;http://www.typematrix.com/&quot;&gt;scariest
keyboard in the world&lt;/a&gt; if he&amp;#39;s wanting to type a lot.&lt;/p&gt;

&lt;p&gt;Vim is enough for me, although Andy in our cohort borrows the keyboard for a day
and starts to learn COLMAC. Brave.&lt;/p&gt;

&lt;h2&gt;Day 3&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m ahead. A few of us are ahead. In fact a few of us are wondering why we&amp;#39;re
not useing OOP methods to write this code because, frankly, it&amp;#39;s looking a bit
messy right now. My code is particularly awful until [Ben] and I chat about it
and he suggests refactoring to make more but shorter methods with much better
names. I kick myself -- I knew that! -- but bad habits die hard.&lt;/p&gt;

&lt;p&gt;But I don&amp;#39;t mind being ahead -- I&amp;#39;m not straining at the bit. At the beginning
Enrique and Stephen said that we&amp;#39;re as strong as our weakest member, and that we
should never leave a man behind. I think of my cohort as a team, and I&amp;#39;m
responsible. So I float around answering questions and trying to help out where
I can. I had a great moment in the morning with &lt;a href=&quot;https://github.com/ruthearle&quot;&gt;Ruth&lt;/a&gt; in which we both learned
new things about symbols, and I&amp;#39;ve enjoyed speaking to &lt;a href=&quot;https://github.com/silver-io&quot;&gt;Javier&lt;/a&gt; about -- well
lots of things. We have pretty similar motivations for getting in to Makers; we
both want a better, more fulfilling work life. I&amp;#39;m more sure now that I&amp;#39;ve found
it.&lt;/p&gt;

&lt;p&gt;And I like talking about code! I hadn&amp;#39;t realised that this is what I was missing
so much. Talking and working everyday in Ruby has increased my confidence and my
knowledge. Helping others helps yourself, teachers learn more from their
students. The last time I felt this way was at University, and it&amp;#39;s a great
feeling.&lt;/p&gt;

&lt;p&gt;Stephen and Roi introduce the finer points of using Git today in a fantastic
lecture. I&amp;#39;ve found myself getting tangled up in my own branches so much that it
was good to have things explained carefully and accurately, and with
a demonstration as well. I learned a lot.&lt;/p&gt;

&lt;h2&gt;Day 4&lt;/h2&gt;

&lt;p&gt;Test Driven Developmet (TDD) drops with a bang today as Enrique and Stephen
introduce &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; and a completely different way of writing code. Really.
I&amp;#39;d heard of TDD, I&amp;#39;d heard people moan about or praise it -- but I&amp;#39;d not
seen it until Enrique started hammering away at Vim on the projector to create
&lt;a href=&quot;https://ithub.com/gypsydave5/fizzbuzz&quot;&gt;FizzBuzz&lt;/a&gt; by first defining what the code ought to be doing and then making it
do it, then expanding the spec&amp;#39;, making the code fail, making the code pass,
expanding the spec&amp;#39;... repeat, rinse... it was amazing. He hooked it up with the
idea of both the scientific method and a good doctor washing their hands. And it
made sense -- declaring where you&amp;#39;re going and then getting there, rather than
just blindly, messily, hacking around until something drops out.&lt;/p&gt;

&lt;p&gt;We should be able to repeat these steps, write a FizzBuzz implementation using
TDD, in less that five minutes. My first try was 33. I think it&amp;#39;s a great way to
practice.&lt;/p&gt;

&lt;p&gt;We also had a talk by &lt;a href=&quot;https://twitter.com/rubenkostucki&quot;&gt;Reuben&lt;/a&gt; and Sam who both work to get Makers students
placements when they graduate. It was a really good idea to have them introduce
themselves and talk about what we could do to make their lives (and so our lives)
easier. Which boiled down to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pair. A Lot.&lt;/li&gt;
&lt;li&gt;Always TDD. Always.&lt;/li&gt;
&lt;li&gt;Push often and always to GitHub.&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t worry about the job. Do the course.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Which was a load off everyone&amp;#39;s mind.&lt;/p&gt;

&lt;p&gt;The Friday Challenge was CLI based, so I waltzed blithly through (and had
a really good time remembering some fun commands). Excitingly it was marked with
an RSpec file which checked whether your changes &amp;#39;passed&amp;#39; -- literally.
Unfortunately the file was written in an earlier version of the RSpec syntax and
so the tests failed even when they should&amp;#39;ve passed. So &lt;a href=&quot;https://github.com/spike01&quot;&gt;Spike&lt;/a&gt; and I got to do
our own Friday Challenge and fix the RSpec file. I say challenge -- we made more
of a mountain out of that molehill than maybe we should&amp;#39;ve, but we learned a lot
about octal, binary, Unix permissions and bitwise operators on the way, as well as Rspec.&lt;/p&gt;

&lt;p&gt;Mulling over what was going on with &lt;code&gt;permissions &amp;amp; 0000100&lt;/code&gt; while leaning on
a beanbag, talking the problem through with a new friend while drinking a cold
beer at six-thirty on a Friday, I felt happier than I have in years. In the last
week I&amp;#39;ve literally eaten and slept code (I dreamed in Ruby one night. It was
odd) almost every hour of the day. And I love it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>One week to go</title>
   <link href="http://gypsydave5.com/2014/07/28/one-week/"/>
   <updated>2014-07-28T16:06:19+01:00</updated>
   <id>http://gypsydave5.com/2014/07/28/one-week</id>
   <content type="html">&lt;p&gt;For those who know me, or have been following my &lt;a href=&quot;https://twitter.com/gypsydave5&quot;&gt;Twitter feed&lt;/a&gt;, you may
know that I&amp;#39;ll be starting at &lt;a href=&quot;http://www.makersacademy.com/&quot;&gt;Makers Academy&lt;/a&gt; on the 4th of August.
That&amp;#39;s in a week&amp;#39;s time. Part of the reason I&amp;#39;ve been keeping this blog is to
monitor my progress in preparing for that day.&lt;/p&gt;

&lt;p&gt;So, why Makers?&lt;/p&gt;

&lt;p&gt;My New Year&amp;#39;s resolution was to change my life (aren&amp;#39;t they always?). I didn&amp;#39;t
want to spend the next thirty-plus years working in a career I was adequately
suited for (marketing) and being the guy in the department who got to do all the
maths-y/computery stuff while not being at all enthusiastic about... well, about
everything else he was doing. At the time I was having a terrible time in my job&lt;/p&gt;

&lt;p&gt;I sought advice from everyone I knew, and talked incessantly about software
development with anyone who would listen. I&amp;#39;m blessed with good, patient friends
who were happy to put up with this, a number of who work in the industry
already. They&amp;#39;ve steered me and mentored me over the last few months
(specifically &lt;a href=&quot;https://twitter.com/shapeshed&quot;&gt;@shapeshed&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/asbrookes&quot;&gt;@asbrookes&lt;/a&gt;), shown me where
&lt;a href=&quot;http://www.codecademy.com/&quot;&gt;codecademy&lt;/a&gt; was, and generally answered any of my questions.  I recognised
that this career change was going to work - the more I learned the more I wanted
to learn, and the more there was to learn the more a learned (a happy virtuous
circle). An interest in tech and programming became a passion (my partner can
attest to this - barely an evening without being glued to the laptop, tapping
away).  I became confident in my decision.&lt;/p&gt;

&lt;p&gt;I mentioned my intentions to my friend Mike. &amp;quot;Oh,&amp;quot; he said, &amp;quot;sort of like what
&lt;a href=&quot;https://twitter.com/jamesjoshuahill&quot;&gt;Josh&lt;/a&gt; did at that Maker&amp;#39;s place?&amp;quot; So I caught up with Josh who raved
about his experience, the atmosphere and the amount he learned. I showed the
course to my other dev friends. They hadn&amp;#39;t heard of Makers, but were generally
impressed by the programme. One expressed concern about the Ruby/Rails focus, in
a world where &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; was becoming the next big thing. They suggested
I ask the question.&lt;/p&gt;

&lt;p&gt;So I wrote a short email to Makers, saying - &amp;#39;hey, why Rails?&amp;#39; And I got a well
thought out, well written, extensive email in reply, arguing that, yes, Node was
important, but that Makers teachers how to be a developer in a culture/method
sense of that word, and that Rails was just a good platform to start from - not
the be all and end all.&lt;/p&gt;

&lt;p&gt;Cost was of course an issue - nobody spends the best part of £10,000 pounds on
a whim. And if I could achieve the same results just through educating myself
the Makers experience would be pointless. But I know a few things about myself:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I &lt;em&gt;like&lt;/em&gt; difficult things&lt;/li&gt;
&lt;li&gt;I work in intense bursts&lt;/li&gt;
&lt;li&gt;I work best under pressure&lt;/li&gt;
&lt;li&gt;I prefer to be in a gang working towards the same goal&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know that I&amp;#39;d work best with a goal, in an immersive environment, surrounded
by bloody clever people all working towards the same thing and supporting each
other. It&amp;#39;s what saw me through University. I took particular note of &lt;a href=&quot;http://www.startuprob.com/learn-to-code/&quot;&gt;this
article&lt;/a&gt; by one of the co-founders of Makers, &lt;a href=&quot;https://twitter.com/startuprob&quot;&gt;Rob Johnson&lt;/a&gt;.
I also knew that I couldn&amp;#39;t hang around, that if this was the right decision
then it was the right decision &lt;em&gt;now&lt;/em&gt;, and it had to happen as quickly and
efficiently as possible.&lt;/p&gt;

&lt;p&gt;I looked at other other bootcamps, mainly &lt;a href=&quot;https://generalassemb.ly/london&quot;&gt;General Assembly&lt;/a&gt;, who definitely
have scale and experience on their side. But I was sold on Makers after spending
some time with the other finalists of the &lt;a href=&quot;http://blog.skimlinks.com/2014/03/12/skimlinkstomakers-competition-introducing-the-finalists/&quot;&gt;#SkimlinksToMakers&lt;/a&gt; competition
during the final interviews, and at the Makers open days. Meeting the
instructors (I especially remember talking with &lt;a href=&quot;https://twitter.com/rubenkostucki&quot;&gt;Ruben&lt;/a&gt; - and a slightly
confusing attempt to talk with passion about &lt;em&gt;Person of Interest&lt;/em&gt;, the Turing
test, chess and some other things. Enthusiastic, yes. Coherent...?). I also read
the (numerous) blogs of former students - I found &lt;a href=&quot;http://davewood.me/blog/2014/01/18/makers-academy-rewound/&quot;&gt;Dave Wood&lt;/a&gt;&amp;#39;s
description pretty exciting and useful, and of course &lt;a href=&quot;http://jamesjoshuahill.tumblr.com/&quot;&gt;Josh&lt;/a&gt;&amp;#39;s. I also
had a forty-minute phone conversation with &lt;a href=&quot;https://twitter.com/JordanPoulton&quot;&gt;Jordan&lt;/a&gt; (he sent the great
email), who again answered all my questions in an open, non-salesy way. He&amp;#39;d
&lt;a href=&quot;http://www.jordanpoulton.com/blog/makers-academy-12-hours-to-lift-off/&quot;&gt;done the course himself&lt;/a&gt;, which gave a unique perspective, and
spent at least ten minutes trying to put me off.&lt;/p&gt;

&lt;p&gt;He failed. I applied. The interview went well (Jordan again - felt like he was
stalking me...), although it was far from a push over (it&amp;#39;s amazing how difficult
basic maths when someone&amp;#39;s looking over your shoulder - and a US keyboard
layout threw me for at least a minute...). But I left wanting to get in more
than ever, and did a (pretty big) whoop of joy when I received the email telling
me that I had been accepted.&lt;/p&gt;

&lt;p&gt;So here I am, feeling pretty ready. Nervous, and excited. I&amp;#39;ve studied some of
the basics as hard as I could, know more about Ruby than I did six months ago,
and eager for more. I&amp;#39;m really looking forward to learning something new
everyday. First step is meeting the rest of my cohort this Friday (exciting!). I&amp;#39;ll be
blogging as I go along (probably nowhere near as extensively as this), just to
keep a record on how I&amp;#39;m doing.&lt;/p&gt;

&lt;p&gt;But, so far, it looks like this is my best New Year&amp;#39;s resolution. Ever.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Many Enumerable Returns</title>
   <link href="http://gypsydave5.com/2014/07/18/ruby_enumerable_returns/"/>
   <updated>2014-07-18T21:52:15+01:00</updated>
   <id>http://gypsydave5.com/2014/07/18/ruby_enumerable_returns</id>
   <content type="html">&lt;p&gt;As threatened then, here&amp;#39;s the followup to my &lt;a href=&quot;/2014/07/12/destructuring/&quot;&gt;last post&lt;/a&gt; on the
&lt;code&gt;#Enumerables&lt;/code&gt; section from &lt;a href=&quot;https://rubymonk.com/&quot;&gt;Ruby Monk&lt;/a&gt;, how I felt like a bit of an
idiot for a few hours, and what I learned from that.&lt;/p&gt;

&lt;p&gt;tl;dr - enumerable blocks aren&amp;#39;t magic; &lt;code&gt;yield&lt;/code&gt; is magic.&lt;/p&gt;

&lt;p&gt;This question is a little further along from the last, and was framed so:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Try implementing a method called occurrences that accepts a string argument and
uses inject to build a Hash. The keys of this hash should be unique words from
that string. The value of those keys should be the number of times this word
appears in that string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So far so, so good. So I wrote this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;occurrences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\w+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hashy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which spat out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;TypeError
can&amp;#39;t convert String into Integer&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And left me confused for a good few minutes. OK, getting on for a quarter of an
hour. What was going on? - what I&amp;#39;d written was very similar to the example
above:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So I caved and looked at the answer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;occurrences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\w+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which left me none the wiser. Why was the block re-iterating the accumulator
function at the end? To test this I played around with &lt;code&gt;p&lt;/code&gt;-ing the lines of the
block... and discovered something interesting. Namely,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# But...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; build[word.downcase], the new value of that key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The block &lt;em&gt;needs to return the accumulator&lt;/em&gt; - the first example is just lucky
that it does so already!&lt;/p&gt;

&lt;p&gt;The only reason the accumulator in an &lt;code&gt;Enumerable#inject&lt;/code&gt; accumulates is that
&lt;em&gt;it&amp;#39;s returned from the block on each iteration&lt;/em&gt;. In other words, somewhere in
the definition of &lt;code&gt;#inject&lt;/code&gt; for each class that can be made enumerable, the
method &lt;code&gt;yield&lt;/code&gt;s to the block, and then keeps the value returned to be passed in
again as the new accumulator argument.&lt;/p&gt;

&lt;p&gt;I&amp;#39;d previously thought of &lt;code&gt;#inject&lt;/code&gt; as working by &lt;em&gt;magic&lt;/em&gt;, whereas in fact it
was working by a method I could probably write myself given enough time.
Something like this...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;all adds up to: &amp;quot;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# just to prove it&amp;#39;s this method being&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;# called, not the superclasses...&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which gives us such fun as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; all adds up to: 21&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; all adds up to: 31&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; all adds up to: [1, 4, 9, 16, 25, 36]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {5=&amp;gt;&amp;quot;xxxxx&amp;quot;, 6=&amp;gt;&amp;quot;xxxxxx&amp;quot;, 1=&amp;gt;&amp;quot;x&amp;quot;, 2=&amp;gt;&amp;quot;xx&amp;quot;, 3=&amp;gt;&amp;quot;xxx&amp;quot;, 4=&amp;gt;&amp;quot;xxxx&amp;quot;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I relied on &lt;code&gt;#each&lt;/code&gt; here, but we could easily write an &lt;code&gt;each&lt;/code&gt; method using
a &lt;code&gt;for... in...&lt;/code&gt; loop or similar. The genius is in &lt;code&gt;yield&lt;/code&gt;, which is the &lt;em&gt;real
magic&lt;/em&gt; that&amp;#39;s going on here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rubymonk.com/&quot;&gt;Ruby Monk&lt;/a&gt; has more about the &lt;a href=&quot;http://rubymonk.com/learning/books/1/chapters/34-lambdas-and-blocks-in-ruby/lessons/78-blocks-in-ruby&quot;&gt;magic of yield&lt;/a&gt;, and why it&amp;#39;s
weird in a language that professes that everything is an object. Like a lot in
Ruby, I discovered a small thing didn&amp;#39;t work, patiently played with it until
I found out why, and then &amp;#39;worked&amp;#39; that small new piece of knowledge to give me
greater insight into what was going on. I&amp;#39;m finding this to be the most
satisfying method to learn by, both because it makes me feel like I&amp;#39;m learning
to a deeper degree than I would by just reading the answers out of a book, and
in addition, when the books do cover the subject, I can better apply what&amp;#39;s
written there to what I&amp;#39;ve seen in action.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;postscipt&lt;/em&gt; - 27/714&lt;/h3&gt;

&lt;p&gt;Of course, David Black covers the same ground, but better (gets &lt;code&gt;each&lt;/code&gt; off the
ground using a &lt;code&gt;for&lt;/code&gt; loop), in chapter 6 of &lt;a href=&quot;http://www.manning.com/black2/&quot;&gt;&lt;em&gt;The Well Grounded Rubyist&lt;/em&gt;&lt;/a&gt;. Love that
book.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Destructuring in a Method Block</title>
   <link href="http://gypsydave5.com/2014/07/12/destructuring/"/>
   <updated>2014-07-12T19:52:15+01:00</updated>
   <id>http://gypsydave5.com/2014/07/12/destructuring</id>
   <content type="html">&lt;p&gt;I went from genius to idiot - very rapidly - when looking at Enumerable#map and
#inject in &lt;a href=&quot;https://rubymonk.com/&quot;&gt;Ruby Monk&lt;/a&gt;, a free resource to help learn ruby that I&amp;#39;ve
found really useful. Let&amp;#39;s start with &amp;#39;genius&amp;#39; (although not really genius, more
wrong but lucky).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/44-collections/lessons/98-iterate-filtrate-and-transform#solution4313&quot;&gt;question&lt;/a&gt; was as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exploit the fact that map always returns an array: write a method &lt;code&gt;hash_keys&lt;/code&gt;
that accepts a hash and maps over it to return all the keys in a linear Array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exciting, right?&lt;/p&gt;

&lt;p&gt;The solution that RM gave was this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I went for:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not much difference, but enough. I had become confused when I entered my code,
thinking more about the &lt;code&gt;each_with_index&lt;/code&gt; method mentioned in the same page
above. I was forgetting that &lt;code&gt;#map&lt;/code&gt; would be sending back a single value, an
array of the key-value pair. Ruby Monk&amp;#39;s solution used that fact to use the
method &lt;code&gt;#first&lt;/code&gt; on the array, to get the first element (the key) out.&lt;/p&gt;

&lt;p&gt;But, by chance, my solution worked - it split the array by telling the
block for map that it would be getting two arguments - checking with the good
people on the #ruby channel on IRC (a chap called bannisterfiend to be precise),
this is &lt;a href=&quot;http://tony.pitluga.com/2011/08/08/destructuring-with-ruby.html&quot;&gt;&lt;em&gt;destructuring&lt;/em&gt;&lt;/a&gt;, binding a set of values to
a corresponding set of values that you can normally bind to a single variable
(that&amp;#39;s the definition as given in &lt;a href=&quot;http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node252.html&quot;&gt;Common Lisp&lt;/a&gt;, but makes sense here).&lt;/p&gt;

&lt;p&gt;What we&amp;#39;re seeing is this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But done as a loop for all the arrays pulled out of the hash by &lt;code&gt;#map&lt;/code&gt;. Tony
Pitluga sings the praises of destructuring block arguments (which is what this
is) in his longer article on &lt;a href=&quot;http://tony.pitluga.com/2011/08/08/destructuring-with-ruby.html&quot;&gt;destructuring in Ruby&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s an improvement in the semantics of the method (would you rather have
&lt;code&gt;key&lt;/code&gt; or &lt;code&gt;pair.first&lt;/code&gt;?) and a saving of writing/time in any later work you might
want to do on the values. Of course, we wouldn&amp;#39;t want to do this to longer
arrays - too many elements to bind to values.&lt;/p&gt;

&lt;p&gt;Unless we used the &amp;#39;unarray&amp;#39; or, &amp;#39;star&amp;#39; or (best name evar) &lt;a href=&quot;http://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/&quot;&gt;splat
operator&lt;/a&gt; to collect some of the other elements.&lt;/p&gt;

&lt;p&gt;Consider:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2,3,4,5,6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;#39;s a lot more on the magic of the splat in the second edition of &lt;a href=&quot;http://www.manning.com/black2/&quot;&gt;The Well
Rounded Rubyist&lt;/a&gt; which has just been published (and which I&amp;#39;m enjoying
immensely).&lt;/p&gt;

&lt;p&gt;OK, I&amp;#39;ll write up my other mistake (the one that broke the &lt;code&gt;#map&lt;/code&gt; block) later in
the week.&lt;/p&gt;

&lt;p&gt;PS - noticed when getting links for this post that Ruby 2.0 introduces the
double-splat operator for &lt;a href=&quot;http://stackoverflow.com/questions/18289152/what-does-double-splat-operators-do-in-ruby&quot;&gt;turning keyword-value pairs in argument lists into
a hash&lt;/a&gt;. Which is also exciting.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows Silver Surfer</title>
   <link href="http://gypsydave5.com/2014/07/07/ag_windows/"/>
   <updated>2014-07-07T23:10:15+01:00</updated>
   <id>http://gypsydave5.com/2014/07/07/ag_windows</id>
   <content type="html">&lt;p&gt;Adding to my list of &lt;a href=&quot;/2014/07/04/surviving_windows/&quot;&gt;ways to fix the Windows experience&lt;/a&gt;, I have to
pay due respect to &lt;a href=&quot;http://blog.kowalczyk.info/&quot;&gt;Krystoff Kowalcyzk&lt;/a&gt;, a developer who
has ported &lt;a href=&quot;http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/&quot;&gt;Ag (aka The Silver Surfer)&lt;/a&gt; over to Windows. He&amp;#39;s also authored
a really elegant (and for elegant please read lightweight and customizable)
PDF viewer &lt;a href=&quot;http://blog.kowalczyk.info/software/sumatrapdf/free-pdf-reader.html&quot;&gt;SumatraPDF&lt;/a&gt;. Both of these have improved my life today.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been looking at alternatives to Adobe Reader on the Ubuntu box as well -
currently I&amp;#39;m enjoying the simplicity of &lt;a href=&quot;http://www.mupdf.com/&quot;&gt;muPDF&lt;/a&gt;, but there are many
other options out there.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Surviving Windows</title>
   <link href="http://gypsydave5.com/2014/07/04/surviving_windows/"/>
   <updated>2014-07-04T12:35:15+01:00</updated>
   <id>http://gypsydave5.com/2014/07/04/surviving_windows</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve worked within Windows and Microsoft OSs for... well, most of my computing
life now I think about it. I&amp;#39;m pretty sure that most people are the same. And
like most people I&amp;#39;ve always had my little moans about it. Too many to mention.&lt;/p&gt;

&lt;p&gt;This has come to a head since I [switched to Linux][LinuxSwitch] a few months
ago. Not that Linux (Ubuntu in my case) doesn&amp;#39;t have it&amp;#39;s own long list of
problems, but they all feel more like problems I should be fixing myself
- rather than things I&amp;#39;ll just moan about and put up with. Yes, Ubuntu (and the
Unity desktop specfically) has &amp;#39;spoiled&amp;#39; me. I&amp;#39;d rather be working in that
environment than any earlier version of Windows. Woo-hoo. Hear the whoop from camp
Linux, joy shall be in heaven over one sinner that repenteth, etc etc usw.&lt;/p&gt;

&lt;p&gt;But there&amp;#39;s still so much of my life that has to be done in Windows. Work
spreadsheet has VBA macros? Work machine in Vista? &lt;a href=&quot;https://launchpad.net/pipelight&quot;&gt;Netflix requires
Silverlight&lt;/a&gt;? It&amp;#39;s inevitable.&lt;/p&gt;

&lt;p&gt;So instead of moaning I&amp;#39;ve been trying to fix Windows to make it usable like
I want it to be. And I think I&amp;#39;ve found some good options. The first thing to
note is that I&amp;#39;ve been so used to putting up with Windows that I was under the
impression that there was very little that could be done to it. Lay that thought
to rest - there&amp;#39;s hundreds of hacks, options, fixes, and bits of software we can
use to make Window&amp;#39;s a happier place to be. Or, if not actively happy, then at
least survivable...&lt;/p&gt;

&lt;h2&gt;Winsplit Revolution&lt;/h2&gt;

&lt;p&gt;OK, not the greatest name. What I missed most about Ubuntu when stuck on Vista
was the way I could throw windows around the desktop using the numpad. This
feauture is neatly emulated with &lt;a href=&quot;http://download.cnet.com/WinSplit-Revolution/3000-2072_4-10971915.html&quot;&gt;Winsplit Revolution&lt;/a&gt;, which is small
and, well, works. You can customize the shortcuts too. (Looks like the original
website is no longer around so I&amp;#39;ve linked to the CNET page).&lt;/p&gt;

&lt;h2&gt;Put the taskbar on the side&lt;/h2&gt;

&lt;p&gt;Oh this sounds dumb I know, but nobody even thinks of doing it on Windows
because it&amp;#39;s a change. Totally inspired by the Unity set up, it just makes more
sense. If most of what I&amp;#39;m doing involves reading down a page on the screen
- code, text, etc - then I really want optimize the vertical space on the
screen. So slam the taskbar to the side and get yourself a couple of centimeters
for free. If you were going to try one new thing this week make it this.&lt;/p&gt;

&lt;h2&gt;GVim&lt;/h2&gt;

&lt;p&gt;All that Vim goodness - &lt;a href=&quot;http://www.vim.org/download.php#pc&quot;&gt;now on your Windows&lt;/a&gt;. And you can use the same
config files. And you can set the config depending on the environment (Windows,
Linux, OSX). And you could save all those files onto Dropbox, make symlinks to
them... OK - too far. But get GVim for Windows.&lt;/p&gt;

&lt;h2&gt;Autohotkey&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll write something about the what effect of removing the caps lock button from
my keyboard has been (no, not physically) at a later date. But for fun keyboard
hacks like this and more I&amp;#39;ve been enjoying &lt;a href=&quot;http://www.autohotkey.com/&quot;&gt;Autohotkey&lt;/a&gt;, which has its
own simple scripting language to allow you to remap and rewite your keyboard to
your hearts content.&lt;/p&gt;

&lt;h2&gt;Get GNUy&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve tried &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; before - part of working using a Linux only font
tool. But I found it... big. Powerful, yes - but big. So big I didn&amp;#39;t use it.
Second time around I&amp;#39;ve been using &lt;a href=&quot;https://github.com/bmatzelle/gow/wiki&quot;&gt;Gow&lt;/a&gt; - which brings all the *nix-y
command line goodness to your &lt;code&gt;cmd&lt;/code&gt; shell in Windows.&lt;/p&gt;

&lt;h2&gt;Chocolatey&lt;/h2&gt;

&lt;p&gt;Missing &lt;code&gt;apt-get&lt;/code&gt; or similar package management utilities on Windows?
&lt;a href=&quot;http://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; to the rescue. Install Git! Install Node! Install
everything listed above and more, and get them all updated from the command
line. It&amp;#39;s brilliant.&lt;/p&gt;

&lt;p&gt;Ah, that&amp;#39;s it for now. All I&amp;#39;d finish off by saying is that the only thing
holding me back from improving my experience of Windows was... ignorance. And
indolence. GNU/Linux makes you change things to fit the way you work, and as soon as
you&amp;#39;ve learned how to do that it&amp;#39;s easier to avoide complacence with other OSes.
. A good lesson.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interview at 'My Linux Rig'</title>
   <link href="http://gypsydave5.com/2014/07/03/interview/"/>
   <updated>2014-07-03T23:42:15+01:00</updated>
   <id>http://gypsydave5.com/2014/07/03/interview</id>
   <content type="html">&lt;p&gt;A few months ago Steven Ovadia over at &lt;a href=&quot;http://www.mylinuxrig.com/&quot;&gt;My Linux Rig&lt;/a&gt; spotted my post
about &lt;a href=&quot;/2014/04/29/late-in-the-day-linux/&quot;&gt;the night I installed Linux&lt;/a&gt; and asked me if I&amp;#39;d like to do a quick
interview about, well, about my Linux setup. Sounded like a good idea so
I answered his questions. He posted &lt;a href=&quot;http://www.mylinuxrig.com/post/90468057902/the-linux-setup-david-wickes-software-developer&quot;&gt;the interview&lt;/a&gt; today and
if you&amp;#39;d like to look at it.&lt;/p&gt;

&lt;p&gt;If there&amp;#39;s any amendments that need to be made now that I&amp;#39;ve been using Linux
for, oh, about 20 times as long as I had been, it would have to be that I find
myself wrestling with the system more - but in a good way. I know that I can
make it do the things I want it to if I just invest a bit of time and effort to
find out how. Linux doesn&amp;#39;t make me &amp;#39;put up and shut up&amp;#39; - it actively
encourages me to fix things, make it suit me. This sort of experimentation and
investigation takes time, but it&amp;#39;s ultimately very rewarding - I know my way
around my Linux machine better than my Windows set up.&lt;/p&gt;

&lt;p&gt;In addition I rarely touch ST3 any more, spending most of my editing time on
Vim as &lt;a href=&quot;/2014/06/14/vimmified/&quot;&gt;previously mentioned&lt;/a&gt;. And Guake lost its novelty rapidly. Right now I&amp;#39;m
sifting through five years of Gmail using &lt;a href=&quot;http://www.mutt.org/&quot;&gt;Mutt&lt;/a&gt;. Now that&amp;#39;s something.
And using &lt;a href=&quot;http://irssi.org/&quot;&gt;irssi&lt;/a&gt; to dip my toe into the community with IRC.&lt;/p&gt;

&lt;p&gt;Probably the most affecting bit is to see the phrase &amp;#39;David Wickes, Software
Developer&amp;#39; at the top. I&amp;#39;m not a software developer - yet. But I will be soon.
And reading that, well, it made me feel pretty good about myself. Something to
aspire to.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vimmified!</title>
   <link href="http://gypsydave5.com/2014/06/14/vimmified/"/>
   <updated>2014-06-14T21:52:15+01:00</updated>
   <id>http://gypsydave5.com/2014/06/14/vimmified</id>
   <content type="html">&lt;p&gt;I&amp;#39;m not sure why I&amp;#39;ve started to use Vim obsessively over the last week - there
are a number of factors feeding in, mostly centred around my perverse need to do
make something more difficult than is strictly necessary; I&amp;#39;m learning Vim
&amp;quot;Because it&amp;#39;s there&amp;quot;...&lt;/p&gt;

&lt;p&gt;That&amp;#39;s not strictly true - if I&amp;#39;m going to blame something it&amp;#39;s going to be
Windows Vista. Or, more speifically, the way Windows Vista insists on
sporadically freezing my mouse for 10-20 seconds every fifteen minutes or so.
It starts to add up, killing the flow of the work and slowing me down no end.&lt;/p&gt;

&lt;p&gt;So I discovered &lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en&quot;&gt;Vimium&lt;/a&gt;, an extension for Chromium that puts all the
Vim keys into the browser. If you&amp;#39;ve used the shortcut keys in Twitter you&amp;#39;ll be
right at home (the same with Gmail&amp;#39;s shortcuts but slightly less so). It&amp;#39;s not
only let me circumvent my mouse when it freezes; I&amp;#39;ve found myself using it in
preference to the mouse in most cases, fingers sitting happily on the home keys
as I navigate around the web, mostly without any hold ups. Even if you don&amp;#39;t
think you&amp;#39;ll use it it&amp;#39;s worth installing just to see the way it implements link
clicking.&lt;/p&gt;

&lt;p&gt;So having got this far it felt churlish not to go and install Vim, by way of the
Windows build of &lt;a href=&quot;http://www.vim.org/download.php&quot;&gt;Gvim&lt;/a&gt;. Now, while I&amp;#39;m trying to wean myself off Windows
(made much easier by having a Vista box at work), I am still forced to use it
(oh that Vista box at work). I&amp;#39;d been happy up to now with &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text
3&lt;/a&gt;, which I have synced across all my computers and which also implements
a &lt;a href=&quot;http://www.sublimetext.com/docs/3/vintage.html&quot;&gt;&amp;#39;Vintage&amp;#39;&lt;/a&gt; (should that be &amp;#39;Vimtage&amp;#39;) mode with a most of the Vim
commands intact. But it&amp;#39;s always worth trying new things I figured, and getting
Vim going nicely on Windows seemed like a fun challenge.&lt;/p&gt;

&lt;p&gt;Challenge it was. I love the Sublime Text &lt;a href=&quot;https://sublime.wbond.net/&quot;&gt;Package Manager&lt;/a&gt;, which
beautifully lists and installs packages from Sublime Text itself. Very cool.
Looking for something similar in Vim I found &lt;a href=&quot;https://github.com/gmarik/Vundle.vim/wiki/Vundle-for-Windows&quot;&gt;Vundle&lt;/a&gt;, which installs
Vim packages directly from Github, locally, or almost anywhere, when they&amp;#39;re
listed in the &lt;code&gt;.vimrc&lt;/code&gt; configuration file. Like everything in the open-source
community it&amp;#39;s all geared up for *nix systems, so takes &lt;a href=&quot;https://github.com/gmarik/Vundle.vim/wiki/Vundle-for-Windows&quot;&gt;a little bit of
tweaking&lt;/a&gt; to get going on Windows.&lt;/p&gt;

&lt;p&gt;Even more tweaking was required when I decided to take a great leap forward and
put &lt;a href=&quot;https://github.com/zaiste/vimified&quot;&gt;Vimified&lt;/a&gt; on as well, a starting collection of packages for Vim.
Which of course was also &lt;a href=&quot;http://kaszkowiak.eu/windows-vimified/&quot;&gt;fraught on Windows&lt;/a&gt;. But ultimately
successful (even if I did seem to spend at least three days getting the
&lt;a href=&quot;https://github.com/bling/vim-airline&quot;&gt;Airline/Powerline&lt;/a&gt; status bar fonts working).&lt;/p&gt;

&lt;p&gt;Half the fun of this little project has been learning how to edit the .vimrc
file - and by extension all *nix config files. More confidence at the command
line can only be a good thing, and a good poke around the workings of Linux has
made me feel a little more confident (even so far as to getting the
&lt;a href=&quot;https://github.com/Lokaltog/powerline&quot;&gt;Powerline&lt;/a&gt; fonts working in Bash).&lt;/p&gt;

&lt;p&gt;What strikes me as I write this (in Vim - but on the Linux box at home) about
a month on is how swiftly the Vim keys have worked themselves into my average
workflow. I find it faster to open new lines, append lines, and navigate with
J/K than arrows.  Combined with Alt-Tabbing between windows, and Vimium in the
browser, I haven&amp;#39;t touched the mouse in creating this document - including all
the copy-pasting of links. I haven&amp;#39;t even left the home keys.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not quite happy to leave Sublime Text yet - but I&amp;#39;m certainly seeing my way there.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Pair of Podcasts</title>
   <link href="http://gypsydave5.com/2014/05/21/a-pair-of-podcasts/"/>
   <updated>2014-05-21T23:06:15+01:00</updated>
   <id>http://gypsydave5.com/2014/05/21/a-pair-of-podcasts</id>
   <content type="html">&lt;p&gt;Trying to bootstrap myself into software development is a struggle. A struggle
with some successes - I mean, let&amp;rsquo;s not forget that I&amp;#39;m writing this in
markdown using vim using jekyll to create a static site that&amp;rsquo;s being
hosted with GitHub Pages; a few months ago I wouldn&amp;rsquo;t have known what that
meant. But a struggle none the less.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always found immersion to be key to being able to get my head around
a subject - just hammering away until it starts to make sense. A great help in
all of this has been a pair of fantastic podcasts from Envylabs, &lt;a href=&quot;http://five-js.envylabs.com/&quot;&gt;&lt;em&gt;Five Minutes
of JavaScript&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;http://ruby5.envylabs.com/&quot;&gt;&lt;em&gt;Ruby 5&lt;/em&gt;&lt;/a&gt; (it was only when I came to Google
&amp;ldquo;JavaScript 5&amp;rdquo; that it became clear why they went with the
convoluted title...).&lt;/p&gt;

&lt;p&gt;Both podcasts are short - seven minutes max - and just list down anything
that&amp;rsquo;s going on with the two languages at the moment. They&amp;rsquo;re
broadcast twice weekly, keeping the information fresh and pertinent. At first
I had very little idea what was going on - technologies I&amp;rsquo;d never heard of
doing things I couldn&amp;rsquo;t understand, updates, new &amp;#39;gems&amp;#39;... all a bit of
a mystery.&lt;/p&gt;

&lt;p&gt;But the short format, and regular broadcasts, encouraged listening. I can catch
up in five minutes when waiting for a train, walking the dog, popping to the
shops. And it&amp;rsquo;s started to pay off; I now understand about 70% of what&amp;#39;s
going on in each episode, and I&amp;#39;m using the technologies they talk about (like
jekyll).&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve tried other podcasts and audios - chiefly lecture series from some of
America&amp;#39;s great institutions such as Harvard&amp;#39;s &lt;a href=&quot;https://www.edx.org/course/harvardx/harvardx-cs50x-introduction-computer-1022#.U30fhR_Hk8o&quot;&gt;CS50&lt;/a&gt; course available
from &lt;a href=&quot;https://www.edx.org/course/harvardx/harvardx-cs50x-introduction-computer-1022#.U30fhR_Hk8o&quot;&gt;EdX&lt;/a&gt;, and Stanford&amp;#39;s &lt;a href=&quot;http://see.stanford.edu/see/courseinfo.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111&quot;&gt;Programming Methodology&lt;/a&gt; course
(which I enjoy a lot). While these broad academic courses are both informative
and entertaining, and helpful, I&amp;#39;m still not at the point where the subjects
unders discussion are anything more than reinforcement to my study of Ruby and
JavaScript. I&amp;#39;m sure it will also click into place eventually, much like the
Envylabs podcasts.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s worth mentioning the player I&amp;#39;m using too - &lt;a href=&quot;https://player.fm/&quot;&gt;Player FM&lt;/a&gt; is maybe
the best thing I&amp;#39;ve ever used to play a podcast. Does everything you want, does
nothing you don&amp;#39;t and sits on the phone occasionally telling you when there&amp;#39;s
a new episode.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rails for Zombies</title>
   <link href="http://gypsydave5.com/2014/05/01/rails-for-zombies/"/>
   <updated>2014-05-01T07:56:31+01:00</updated>
   <id>http://gypsydave5.com/2014/05/01/rails-for-zombies</id>
   <content type="html">&lt;p&gt;Just been looking at &lt;a href=&quot;http://railsforzombies.org/&quot;&gt;Rails for Zombies&lt;/a&gt; again in preparation for my
forthcoming interview with &lt;a href=&quot;http://railsforzombies.org/&quot;&gt;Makers Academy&lt;/a&gt; (because it’s never too late and
you can always do more).&lt;/p&gt;

&lt;p&gt;It strikes me what a difference a few months of Ruby and a course redesign
makes. Now when faced with the first set of exercises I wasn’t, as before,
struggling to keep up and make sense. Instead I was interrogating what was going
on - “Wait, &lt;code&gt;Zombie.find(1)&lt;/code&gt; - what’s it finding? Capital Z… is it a class?
Let’s find out &lt;code&gt;Zombie.class =&amp;gt; Class&lt;/code&gt;  - cool, so the tables are represented by
different classes in Ruby… what sort of methods does a Zombie have anyway?
&lt;code&gt;Zombie.find(1).methods&lt;/code&gt;…” and so on.&lt;/p&gt;

&lt;p&gt;This was great - using the techniques I’d picked up from Ruby Monk and Ruby
Koans to work out for myself what was going on (and not have an instructor tell
me). By the end of the course (and the first part of the sequel) I had suddenly
gained an insight not only into what Rails can do, but how it does it, and why
it does it the way it does. I could also see what MVC was, not just as a theory
but literally in the code - this is the controller, this is a model.&lt;/p&gt;

&lt;p&gt;The guys at &lt;a href=&quot;https://www.codeschool.com/&quot;&gt;Codeschool&lt;/a&gt; have changed the course since my first attempt at
it — they describe it as Rails for Zombies: Redux — and it’s a huge improvement.
Definitely worth a look. And it’s FREE!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Late in the day Linux</title>
   <link href="http://gypsydave5.com/2014/04/29/late-in-the-day-linux/"/>
   <updated>2014-04-29T10:18:31+01:00</updated>
   <id>http://gypsydave5.com/2014/04/29/late-in-the-day-linux</id>
   <content type="html">&lt;p&gt;Late in the day yesterday I finally decided that I wanted — no, I needed — to
install Linux. There are a few reasons for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I can’t afford a Mac.&lt;/li&gt;
&lt;li&gt;I need to familiarize myself with the *nix CLI.&lt;/li&gt;
&lt;li&gt;I’m tired of the grinding noises that Windows 7 makes.&lt;/li&gt;
&lt;li&gt;Nobody will buy me a Mac.&lt;/li&gt;
&lt;li&gt;I’m also sick of every damn tutorial I read seeming to be geared up or an OS
X or Linux machine.&lt;/li&gt;
&lt;li&gt;Excitement and adventure, fortune and glory — as always.&lt;/li&gt;
&lt;li&gt;And the lack of Mac.&lt;/li&gt;
&lt;li&gt;(Seriously, I’m beginning to suspect that Mac envy is a disease… I’m not proud
of myself)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last time I tried to do this was back in around 2005 or 6, when I was
dipping my toes into the open source waters to see what could happen. And I was
relatively underwhelmed. Not only did I have no idea what I was doing, but there
didn’t seem to be much to do. I’d installed watever version of Ubuntu was around
on a partition on my old whatever version of Windows PC. I was impressed that it
worked, that it all came together - but then was left struggling over issues of
compatibility of certain bits of hardware - I remember something to do with the
WiFi… and then at the end of it all I still had something which wasn’t quite as
good as XP, and I had no reason to stay around.&lt;/p&gt;

&lt;p&gt;Well, see above for reasons to stay around this time. And how’s the experience
second time around? In a word: flawless. I went with &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;, threw it
onto partition and waited to see what happened. The installation compared
favourably with every Windows installation I’ve ever done (a few by now), it
reached out to my home Wifi to update itself, it recommended some packages to
install. Bliss. The interface is prettier that I could ever have imagined.&lt;/p&gt;

&lt;p&gt;And the other difference from ten years or so ago: applications. There are
actual, genuine, real things for me to use. not just web apps — threw Chrome on
pretty sharpish though and everything I have set up there synchronized neatly
— but the new versions of LibreOffice look to be more than enough for what I’ll
ever need, Dropbox dropped in well — heck, there’s even Steam. Steam! It was all
I could do not play Super Hexagon all afternoon.&lt;/p&gt;

&lt;p&gt;Finally, the juiciness of all that fun developer-oriented functionality that
comes out of the box (or just within reach). The command line just pops up,
things run from the command line — it’s much easier to get my head around.&lt;/p&gt;

&lt;p&gt;So if you’re a little scared of Linux, or perhaps are a little twice-shy like
I was, don’t be. It’s a different, and beautiful, beast out there.&lt;/p&gt;

&lt;p&gt;Now, on to install Rails 4.0.whatever it is right now!&lt;/p&gt;
</content>
 </entry>
 

</feed>
